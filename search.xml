<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Diary2</title>
      <link href="/2020/02/07/spring-diary2/"/>
      <url>/2020/02/07/spring-diary2/</url>
      
        <content type="html"><![CDATA[<h1 id="通过注解配置Bean"><a href="#通过注解配置Bean" class="headerlink" title="通过注解配置Bean"></a>通过注解配置Bean</h1><h2 id="1-在classpath中扫描组件"><a href="#1-在classpath中扫描组件" class="headerlink" title="1.在classpath中扫描组件"></a>1.在classpath中扫描组件</h2><p>1.Spring能从classpath下自动扫描，侦测和实例化具有特定注解的组件</p><p>2.特定的组件包括：</p><p>​        -@Component：基本注解，表示了一个受Spring管理的组件</p><p>​        -@Respository：标识持久层的组件</p><p>​        -@Service：标识服务层的组件</p><p>​        -@Controller：标识表现层的组件</p><p>3.命名规则：使用非限定类名，第一个字母小写。也可以在注解中通过value属性值表示组件名称</p><p>4.在组件类上使用特定注解之后需要在配置文件中声明<code>&lt;context:component-scan&gt;</code>这个命名空间。</p><p>5.用resource-pattern属性扫描指定的包</p><p>6.用content:exclude-filter子节点的expression可以排除表达式指定的不需要扫描的组件，用content:include-filter子节点的expression可以排除表达式指定的不需要扫描的组件，但是需要父节点的use-default-filters属性为false，可以修改type的值来改变包含或者不包含实现类的</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    指定SpringIOC容器扫描的包--></span>    <span class="token comment" spellcheck="true">&lt;!--    用resource-pattern属性扫描指定的包--></span>    <span class="token comment" spellcheck="true">&lt;!--    用content:exclude-filter子节点的expression可以排除表达式指定的不需要扫描的组件--></span>    <span class="token comment" spellcheck="true">&lt;!--    用content:include-filter子节点的expression可以排除表达式指定的不需要扫描的组件,但是需要父节点的use-default-filters属性为false--></span>    <span class="token comment" spellcheck="true">&lt;!--    可以修改type的值来改变包含或者不包含实现类的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.annotation<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>这是一份较为简单且完整的spring配置文件的配置，我把这次学习所建的类存放在com.spring.annotation下。</p><h2 id="2-通过注解建立Bean之间的关联关系"><a href="#2-通过注解建立Bean之间的关联关系" class="headerlink" title="2.通过注解建立Bean之间的关联关系"></a>2.通过注解建立Bean之间的关联关系</h2><p>1.当Bean之间存在关联关系的时候，在没有注解的情况下无法调用关联的Bean。</p><p>建立下列Bean关系作实例</p><pre class=" language-java"><code class="language-java">`UserService<span class="token punctuation">.</span>java`<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">`UserRepositoryImpl<span class="token punctuation">.</span>java`<span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"UserRepository"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserRepositoryImpl save"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">`UserController`<span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring 配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.annotation<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>2.在构造器、普通字段、一切具有参数的方法都可以使用@Autowired注解，这样spring在构造的时候就会自动构造这个注解所表示的代码。</p><p>3.Autowired装载的属性必须在spring里注解，否则会抛异常，如果想让它不存在可以将required设置为false。</p><h2 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h2><p>​        这一节的学习就到这，代码我会上传到我的<a href="https://github.com/dongdongdontforget" target="_blank" rel="noopener">github</a>上，学会了写博客学习就停不下来了。</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring diary1</title>
      <link href="/2020/02/07/spring-diary1/"/>
      <url>/2020/02/07/spring-diary1/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h1><p>由于个人因素spring刚开始的学习没有记录到博客上，只能从这节开始记录</p><h2 id="一-Spring介绍"><a href="#一-Spring介绍" class="headerlink" title="一.Spring介绍"></a>一.Spring介绍</h2><p>​        Spring4.0是 Spring 推出的一个重大版本升级，进一步加强了 Spring 作为 Java 领域第一开源平台的地位。Spring4.0 引入了众多 Java 开发者期盼的新特性，如泛型依赖注入、SpEL、校验及格式化框架、Rest风格的 WEB 编程模型等。这些新功能实用性强、易用性高，可大幅降低 JavaEE 开发的难度，同时有效提升应用开发的优雅性。</p><p>1.Spring是一个开源框架。</p><p>2.Spring为简化企业级应用开发而生。使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。</p><p>3.Spring是一个IOC（DI）和AOP容器框架</p><p><strong>特点：</strong></p><p>​        -轻量级</p><p>​        -依赖注入（DI）</p><p>​        -面向切面编程（AOP）</p><p>​        -容器</p><p>​        -框架</p><p>​        -一站式</p><p><img src="/2020/02/07/spring-diary1/arch1.png" alt="p1"></p><h2 id="二-Spring学习来源"><a href="#二-Spring学习来源" class="headerlink" title="二.Spring学习来源"></a>二.Spring学习来源</h2><p>​        博主的学习资料来自于一个叫做<strong>代码基基</strong>的UP主，视频链接<u><a href="https://www.bilibili.com/video/av59570922" target="_blank" rel="noopener">点击这里</a></u>。这里已经得到了UP主的授权，视频一共36节，辅助学习地方用到了w3cschool的教程，希望对大家有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My firsy blog</title>
      <link href="/2020/02/06/my-firsy-blog/"/>
      <url>/2020/02/06/my-firsy-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="经过不懈的努力-终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！"><a href="#经过不懈的努力-终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！" class="headerlink" title="经过不懈的努力 终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！"></a>经过不懈的努力 终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！</h1>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
