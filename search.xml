<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring-Diary3</title>
      <link href="/2020/02/17/spring-diary3/"/>
      <url>/2020/02/17/spring-diary3/</url>
      
        <content type="html"><![CDATA[<p>title: Spring Diary3<br>date: 2020-02-17 18:14:24<br>tags: [spring, 学习, 寒假]<br>categories: Java</p><h1 id="Spring-Diary3"><a href="#Spring-Diary3" class="headerlink" title="Spring Diary3"></a>Spring Diary3</h1><p>兜兜转转又回到这里，Spring我又回来了~~</p><h2 id="AOP面向切面编程"><a href="#AOP面向切面编程" class="headerlink" title="AOP面向切面编程"></a>AOP面向切面编程</h2><p>动态代理：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">+</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">-</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">*</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">double</span> first<span class="token punctuation">,</span> <span class="token keyword">double</span> second<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> first <span class="token operator">/</span> second<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>helloworld<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculatorLoggingProxy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//要代理的对象</span>    <span class="token keyword">private</span> Calculator target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CalculatorLoggingProxy</span><span class="token punctuation">(</span>Calculator target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回代理对象</span>    <span class="token keyword">public</span> Calculator <span class="token function">getLoggingProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Calculator proxy <span class="token operator">=</span> null<span class="token punctuation">;</span>        ClassLoader loader <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Calculator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        InvocationHandler h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * proxy: 代理对象。 一般不使用该对象             * method: 正在被调用的方法             * args: 调用方法传入的参数             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                String methodName <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//打印日志</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[before] The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//调用目标方法</span>                Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//前置通知</span>                    result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//返回通知, 可以访问到方法的返回值</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//异常通知, 可以访问到方法出现的异常</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//后置通知. 因为方法可以能会出异常, 所以访问不到方法的返回值</span>                <span class="token comment" spellcheck="true">//打印日志</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[after] The method ends with "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * loader: 代理对象使用的类加载器。          * interfaces: 指定代理对象的类型. 即代理代理对象中可以有哪些方法.          * h: 当具体调用代理对象的方法时, 应该如何进行响应, 实际上就是调用 InvocationHandler 的 invoke 方法         */</span>        proxy <span class="token operator">=</span> <span class="token punctuation">(</span>Calculator<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> interfaces<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Aspect：基于注解的形式切入</p><p>需要用的jar包：<a href="download/com.springsource.net.sf.cglib-2.2.0.jar">com.springsource.net.sf.cglib-2.2.0.jar</a>,<a href="download/com.springsource.org.aopalliance-1.0.0.jar">com.springsource.org.aopalliance-1.0.0.jar</a>,<a href="download/com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar">com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar</a></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>JoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ProceedingJoinPoint<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>aspectj<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>NotNull<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Array<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把这个类声明为一个切面：需要把类放入到IOC容器中，在声明一个切面</span><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoggingAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"execution(public double com.study.spring.aop.impl.Calculator.*(.. ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object <span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" begins with "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//后置通知不论是否出现异常都会输出。</span>    <span class="token comment" spellcheck="true">//后置通知不能获得结果</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"execution(public double com.study.spring.aop.impl.Calculator.*(.. ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterMethod</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> JoinPoint joinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object <span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" ends "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 可以获取到返回值的返回通知     * @param joinPoint     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public double com.study.spring.aop.impl.Calculator.*(.. ))"</span><span class="token punctuation">,</span>returning<span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object result<span class="token punctuation">)</span><span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object <span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" Returning "</span><span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     * @param e:可以访问异常对象，可以指定特定异常时再通知     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public double com.study.spring.aop.impl.Calculator.*(.. ))"</span><span class="token punctuation">,</span>throwing<span class="token operator">=</span> <span class="token string">"e"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The method "</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">" occurs "</span><span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知需要携带ProceedingJinPoint类型的参数     * 环绕过程类似于动态代理的全过程，可以指定是否执行目标方法。     * 且环绕通知必须要有返回值，返回值即为目标方法的返回值     * @param proceedingJoinPoint     * @return     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"execution(public double com.study.spring.aop.impl.Calculator.*(.. ))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">aroundMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint proceedingJoinPoint<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object result <span class="token operator">=</span> null<span class="token punctuation">;</span>        String methodName <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行目标方法</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the method "</span><span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"begin with "</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> proceedingJoinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"the method "</span><span class="token operator">+</span> methodName <span class="token operator">+</span> <span class="token string">"end with "</span><span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>基于注解的形式切入</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>arithmeticCalculator<span class="token punctuation">"</span></span>         <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.spring.aop.impl.CalculatorImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置切面的 bean. --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loggingAspect<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.study.spring.aop.impl.LoggingAspect<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置 AOP --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切点表达式 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.study.spring.aop.impl.Calculator.*(..))<span class="token punctuation">"</span></span>             <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切面及通知 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>loggingAspect<span class="token punctuation">"</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeMethod<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterMethod<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterThrowing<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">throwing</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>e<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterReturning<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pointcut<span class="token punctuation">"</span></span> <span class="token attr-name">returning</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--              &lt;aop:around method="aroundMethod" pointcut-ref="pointcut"/>            --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JDBC Diary3</title>
      <link href="/2020/02/15/jdbc-diary3/"/>
      <url>/2020/02/15/jdbc-diary3/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-Diary-3"><a href="#JDBC-Diary-3" class="headerlink" title="JDBC Diary 3"></a>JDBC Diary 3</h1><h2 id="JDBC处理BLOB"><a href="#JDBC处理BLOB" class="headerlink" title="JDBC处理BLOB"></a>JDBC处理BLOB</h2><p>LOB，即Large Objects（大对象），是用来存储大量的二进制和文本数据的一种数据类型（一个LOB字段可存储可多达4GB的数据）。</p><p>LOB 分为两种类型：内部LOB和外部LOB。</p><p>JDBC插入和查询Blob</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">InsertBlobTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO customer (name, email, birth, picture) VALUES(?,?,'1999-04-10',?)"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src/com/study/JDBC/7.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"杨璐璐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"1141319552@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">SelectBlobTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select picture from customer where id = 5"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Blob picture <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getBlob</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                InputStream in <span class="token operator">=</span> picture<span class="token punctuation">.</span><span class="token function">getBinaryStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="JDBC处理事务"><a href="#JDBC处理事务" class="headerlink" title="JDBC处理事务"></a>JDBC处理事务</h2><p>1.如果多个操作，每个操作有自己的链接则无法完成事务。</p><p>2.需要取消语句的默认提交。用Conncetion的setAutoCommit方法</p><p>3.需要在catch里设置回滚，用connection的rollback方法</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC Diary2</title>
      <link href="/2020/02/13/jdbc-diary2/"/>
      <url>/2020/02/13/jdbc-diary2/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-Diray2"><a href="#JDBC-Diray2" class="headerlink" title="JDBC Diray2"></a>JDBC Diray2</h1><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h2><p><strong>使用原因：</strong>1.使用Statement写入SQL语句字符串太长，辨识度不高容易出错，而使用PreparedStatement代码清晰，容易查看。</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;2.PreparedStatement是Statement的子接口，功能更丰富，使用了带占位符的字符串，并且提供了传入占位符的方法。</p><p>&emsp;&emsp;&emsp;&emsp;&emsp;3.可以有效的防止SQL注入。</p><p><strong>SQL注入：</strong>例如当你要查询用户表的时候，原本SQL语句是<code>SELECT * FROM users WHERE username=? AND password=?;</code>，SQL注入后<code>SELECT * FROM users WHERE username =&#39;a&#39; OR password =&#39; AND password = &#39; OR &#39;1&#39; = &#39;1&#39;;</code></p><h2 id="利用反射和JDBC元数据编写通用方法"><a href="#利用反射和JDBC元数据编写通用方法" class="headerlink" title="利用反射和JDBC元数据编写通用方法"></a>利用反射和JDBC元数据编写通用方法</h2><p>1.先利用SQL进行查询，得到结果集</p><p>2.获取结果集的列的别名</p><p>3.利用反射创建实体类的对象</p><p>4.再获取结果集的每一列的值，结合3得到一个map，键：列的别名，值：列的值</p><p>5.在利用反射为2的对应的属性赋值，属性即为Map的键，值即为Map的值。  </p><p>Java通过JDBC获得连接以后，得到一个Connection 对象，可以从这个对象获得有关数据库管理系统的各种信息，包括数据库中的各个表，表中的各个列，数据类型，触发器，存储过程等各方面的信息。根据这些信息，JDBC可以访问一个实现事先并不了解的数据库。</p><p>获取这些信息的方法都是在DatabaseMetaData类的对象上实现的，DataBaseMetaData对 象是在Connection对象上获得的。</p><p><strong>DatabaseMetaData类</strong>中提供了许多方法用于获得数据源的各种信息，通过这些方法可以非常详细的了解数据库的信息:</p><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">getURL()</td><td align="center">返回一个String类对象,代表数据库的URL。</td></tr><tr><td align="center">getUserName()</td><td align="center">返回连接当前数据库管理系统的用户名。</td></tr><tr><td align="center">isReadOnly()</td><td align="center">返回-个boolean值,指示数据库是否只允许读操作。</td></tr><tr><td align="center">getDatabaseProductName()</td><td align="center">返回数据库的产品名称。</td></tr><tr><td align="center">getDatabaseProductVersion()</td><td align="center">返回数据库的版本号。</td></tr><tr><td align="center">getDriverName()</td><td align="center">返回驱动驱动程序的名称。</td></tr><tr><td align="center">getDriverVersion()</td><td align="center">返回驱动程序的版本号。</td></tr></tbody></table><p>用<strong>ResultSetMetaData</strong>类可以获取ResultSet对象中的类型和属性信息。</p><table><thead><tr><th align="center">方法名</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">getColumnName(int column)</td><td align="center">获取指定列的名称</td></tr><tr><td align="center">getColumnCount()</td><td align="center">返回当前ResultSet对象中的列数</td></tr><tr><td align="center">getColumnTypeName(int column)</td><td align="center">检索指定列的数据库特定的类型名称</td></tr><tr><td align="center">getColumnDisplaysizelint column)</td><td align="center">指示指定列的最大标准宽度，以字符为单位</td></tr><tr><td align="center">isNullable(int column)</td><td align="center">指示指定列中的值是否可以为null</td></tr><tr><td align="center">isAutoIncrement(int column)</td><td align="center">指示是否自动为指定列进行编号，这样这些列仍然是只读的</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span>clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T entity <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 得到 ResultSet 对象</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 得到 ResultSetMetaData 对象</span>            ResultSetMetaData rsmd <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 创建一个 Map&lt;String, Object> 对象, 键: SQL 查询的列的别名,</span>            <span class="token comment" spellcheck="true">//值: 列的值</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 处理结果集. 利用 ResultSetMetaData 填充 3 对应的 Map 对象</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//5. 若 Map 不为空集, 利用反射创建 clazz 对应的对象</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                entity <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//5. 遍历 Map 对象, 利用反射为 Class 对象的对应的属性赋值.</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry<span class="token operator">:</span> values<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String fieldName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ReflectionUtils<span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> fieldName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> entity<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="DAO设计模式"><a href="#DAO设计模式" class="headerlink" title="DAO设计模式"></a>DAO设计模式</h2><p><strong>DAO:</strong> Data Access Object。包含了访问数据信息的类。包含了对数据CRUD（create，read，update，delete）。而不包括任何业务的相关信息。DAO可以被子类继承也可以直接使用。</p><p>使用JDBC编写DAO可能会包含的方法：</p><p>更新：<code>void update(String sql, bject ...args);</code>  </p><p>查询：①<code>&lt;T&gt; T get(Class&lt;T&gt; clazz, String sql, OBject ... args);</code></p><p>②<code>&lt;T&gt; List&lt;T&gt; getForList(Class&lt;T&gt; clazz, String sql, OBject ... args);</code></p><p>③<code>&lt;E&gt; E getForvalue(String sq1, Object ... args);</code></p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>Java 类的属性:<br>①在JavaEE 中，Java类的属性通过<strong>getter</strong>, <strong>setter</strong> 来定义: get(或set)方法，去除get(或set)后,后字母小写即为Java类的属性<br>②而以前叫的那个属性，即<strong>成员变量</strong>，称之为字段<br>③一般情况下，字段名和属性名都<strong>一致</strong><br>④操作Java类的属性有一个工具包: <strong>beanutils</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>JDBC<span class="token punctuation">.</span>ReflectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>BeanUtils<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DAO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//返回类型为泛型</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span>String sql<span class="token punctuation">,</span> Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>args<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ret <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取结果集的 ColumnLabel 对应的 List     *     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getColumnLabels</span><span class="token punctuation">(</span>ResultSet rs<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> labels <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResultSetMetaData rsmd <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            labels<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> labels<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 处理结果集, 得到 Map 的一个 List, 其中一个 Map 对象对应一条记录     *     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">handleResultSetToMapList</span><span class="token punctuation">(</span>            ResultSet resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 5. 准备一个 List&lt;Map&lt;String, Object>>:</span>        <span class="token comment" spellcheck="true">// 键: 存放列的别名, 值: 存放列的值. 其中一个 Map 对象对应着一条记录</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> columnLabels <span class="token operator">=</span> <span class="token function">getColumnLabels</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 7. 处理 ResultSet, 使用 while 循环</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String columnLabel <span class="token operator">:</span> columnLabels<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object value <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 11. 把一条记录的一个 Map 对象放入 5 准备的 List 中</span>            values<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> values<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">transfterMapListToBeanList</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span>                                                  List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> values<span class="token punctuation">)</span> <span class="token keyword">throws</span> InstantiationException<span class="token punctuation">,</span>            IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InvocationTargetException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        T bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> m <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bean <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> m<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String propertyName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    BeanUtils<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 13. 把 Object 对象放入到 list 中.</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">get</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span>clazz<span class="token punctuation">,</span> String sql<span class="token punctuation">,</span> Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T entity <span class="token operator">=</span> null<span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//1. 得到 ResultSet 对象</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> arg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 得到 ResultSetMetaData 对象</span>            ResultSetMetaData rsmd <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 创建一个 Map&lt;String, Object> 对象, 键: SQL 查询的列的别名,</span>            <span class="token comment" spellcheck="true">//值: 列的值</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> values <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4. 处理结果集. 利用 ResultSetMetaData 填充 3 对应的 Map 对象</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String columnLabel <span class="token operator">=</span> rsmd<span class="token punctuation">.</span><span class="token function">getColumnLabel</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object columnValue <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    values<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">,</span> columnValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//5. 若 Map 不为空集, 利用反射创建 clazz 对应的对象</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                entity <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//5. 遍历 Map 对象, 利用反射为 Class 对象的对应的属性赋值.</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry<span class="token operator">:</span> values<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String fieldName <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object value <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    BeanUtils<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span>fieldName<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> entity<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span>  <span class="token function">getT</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> clazz<span class="token punctuation">,</span>String sql<span class="token punctuation">,</span>Object <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                preparedStatement<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>arg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2. 处理结果集, 得到 Map 的 List, 其中一个 Map 对象</span>            <span class="token comment" spellcheck="true">//就是一条记录. Map 的 key 为 reusltSet 中列的别名, Map 的 value</span>            <span class="token comment" spellcheck="true">//为列的值.</span>            List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> values <span class="token operator">=</span>                    <span class="token function">handleResultSetToMapList</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. 把 Map 的 List 转为 clazz 对应的 List</span>            <span class="token comment" spellcheck="true">//其中 Map 的 key 即为 clazz 对应的对象的 propertyName,</span>            <span class="token comment" spellcheck="true">//而 Map 的 value 即为 clazz 对应的对象的 propertyValue</span>            list <span class="token operator">=</span> <span class="token function">transfterMapListToBeanList</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>preparedStatement<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="JDBC的元数据"><a href="#JDBC的元数据" class="headerlink" title="JDBC的元数据"></a>JDBC的元数据</h2><p>DatabaseMetaData是描述数据库的元数据的对象。</p><p>利用Connection的getMetaData()方法可以获得数据库本身的基本信息。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">DateMetaT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet resultSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DatabaseMetaData metaData <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">getMetaData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getDatabaseProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>metaData<span class="token punctuation">.</span><span class="token function">getDatabaseProductVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span>null<span class="token punctuation">,</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接错误</title>
      <link href="/2020/02/12/shu-ju-ku-lian-jie-cuo-wu/"/>
      <url>/2020/02/12/shu-ju-ku-lian-jie-cuo-wu/</url>
      
        <content type="html"><![CDATA[<h1 id="出现Host-‘127-0-0-1’-is-not-allowed-to-connect-to-this-MySQL-server解决方法"><a href="#出现Host-‘127-0-0-1’-is-not-allowed-to-connect-to-this-MySQL-server解决方法" class="headerlink" title="出现Host ‘127.0.0.1’ is not allowed to connect to this MySQL server解决方法"></a>出现Host ‘127.0.0.1’ is not allowed to connect to this MySQL server解决方法</h1><p>出现了一个连接数据库的小问题，报<font color="red">“Host ‘127.0.0.1’ is not allowed to connect to this MySQL server”</font>这个错误，那是因为MySQL的配置文件中设置了参数： <font color="red">skip-name-resolve</font>，将它注释了就行。</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> JDBC </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC Diary1</title>
      <link href="/2020/02/11/jdbc-diary1/"/>
      <url>/2020/02/11/jdbc-diary1/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC-Diary1"><a href="#JDBC-Diary1" class="headerlink" title="JDBC Diary1"></a>JDBC Diary1</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>&emsp;&emsp;MySQL学完了，现在该学JDBC了，虽然在课堂上学过，但还是觉得没啥用。MySQL博客写的有些枯燥，这里会做一些改进，把一些出现的问题和其解决方案也一并附上。</p><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>&emsp;&emsp;持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘上加以”固化”</strong>，而持久化的实现过程大多通过各种<strong>关系数据库</strong>来完成。</p><p>&emsp;&emsp;持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><h2 id="JDBC介绍"><a href="#JDBC介绍" class="headerlink" title="JDBC介绍"></a>JDBC介绍</h2><p>&emsp;&emsp;JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统</strong>、<strong>通用的</strong>SQL数据库存取和操作的公共接口**（一组API），定义了用来访问数据库的标准Java类库，使用这个类库可以以一种标准的方法、方便地访问数据库资源</p><p>&emsp;&emsp;JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</p><p>&emsp;&emsp;JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了</strong>JDBC<strong>驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</p><h2 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h2><p><img src="/2020/02/11/jdbc-diary1/JDBCAPI.jpg" alt="JDBC API"></p><h2 id="通过Driver接口获取数据库连接"><a href="#通过Driver接口获取数据库连接" class="headerlink" title="通过Driver接口获取数据库连接"></a>通过Driver接口获取数据库连接</h2><p>这里提供MySQL 的驱动包 <a href="/download/mysql-connector-java-8.0.16.jar" ">mysql8.0</a>，将它放在项目根目录的lib文件夹下，如果是Eclipse，找到驱动的位置，右击并build path即可。如果是IDEA第一步相同，还需要在File/Project Structure/Libraries 菜单栏里的+号添加这个包。</p><p>•可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</p><p>•JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p><p>•JDBC URL的标准由三部分组成，各部分间用冒号分隔。</p><p>–jdbc:&lt;子协议&gt;:&lt;子名称&gt;</p><p>–协议：JDBC URL中的协议总是jdbc </p><p>–子协议：子协议用于标识一个数据库驱动程序</p><p>–子名称：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了定位数据库提供足够的信息</p><p>例如<code>jdbc:mysql://localhost:3306/test</code></p><p>最基础的获取连接的方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** DriverTest.java*/</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>study<span class="token punctuation">.</span>JDBC<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DriverTest</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Driver 是一个接口：数据库厂商必须提供实现实现接口，能从其中获取数据库接口     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个Driver实现类的对象</span>        Driver driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>cj<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.准备连接数据库的基本信息：url，password，user</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/employees"</span><span class="token punctuation">;</span>        Properties p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.使用Driver接口的connect获取数据库连接</span>        Connection connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">DriverTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>注意</strong>：mysql8.0版本需要用的是<code>com.mysql.cj.jdbc.Driver()</code>这个驱动，而以下的用的是<code>com.mysql.jdbc.Driver()</code>,否则会连接不成功</p><p>改进后的连接方式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Connection <span class="token function">newTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        String DriverClass <span class="token operator">=</span> null<span class="token punctuation">;</span>        String jdbcUrl <span class="token operator">=</span> null<span class="token punctuation">;</span>        String user <span class="token operator">=</span> null<span class="token punctuation">;</span>        String password <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//采用输入流的方式导入配置文件</span>        InputStream in <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        DriverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jdbcUrl <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Properties info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        info<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//采用反射的方式获取Driver对象，配置文件需要配置全类名。</span>        Driver driver <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DriverClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-properties"><code class="language-properties">/*jdbc.properties*/<span class="token attr-name">driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbcUrl</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://localhost:3306/test</span><span class="token attr-name">user</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">password</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span></code></pre><p>采用DriverManage接口进一步改进</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//准备连接数据库的四个字符串</span>        <span class="token comment" spellcheck="true">//1.获取Properties对象</span>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.获取配置文件的输入流</span>        InputStream in <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"jdbc.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.加载对应流</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.获取对应的字段名</span>        String user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jdbcUrl <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"jdbcUrl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String DriverClass <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载数据库的驱动程序</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>DriverClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取连接</span>        Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>jdbcUrl<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>用DriverManage的好处：不用properties对象导入user和password，而且可以注册多个数据库驱动程序。</p><h2 id="通过Statement执行更新"><a href="#通过Statement执行更新" class="headerlink" title="通过Statement执行更新"></a>通过Statement执行更新</h2><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TestStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1. 获取数据库连接</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.准备插入SQL语句</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO customer (name, email, birth) VALUES('lulu','1141319552@qq.com','1999-04-10')"</span><span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.获取statement对象 执行插入</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//4.关闭statement对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>statement<span class="token operator">!=</span>null<span class="token punctuation">)</span>                statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//5.关闭连接</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span>                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><strong>注意：</strong>①传入的SQL语句只能是更新语句，不能是查询语句。</p><p>&emsp;&emsp;&emsp;②必须关闭statement对象和connection对象。</p><p>&emsp;&emsp;&emsp;③关闭顺序必须是后打开的先关闭。</p><h2 id="通过ResultSet执行查询"><a href="#通过ResultSet执行查询" class="headerlink" title="通过ResultSet执行查询"></a>通过ResultSet执行查询</h2><p>ResultSet:结果集。封装了使用JDBC进行查询的结果。</p><p>1.调用Statement对象的executeQuery(sq1)可以得到结果集。</p><p>2.ResultSet 返回的实际上就是一张数据表。 有一个指针指向数据表的第一样的前面.可以调用next()方法检测下一行是否有效。若有效该方法返回true,且指针下移。相当于Iterator对象的hasNext()和next()方法的结合体。</p><p>3.当指针对位到一行时，可以通过调用getxxx(index)或getxxx( columnName )获取每一列的值。例如: getInt(1), getString(“name” )。</p><p>4.ResultSet 当然也需要进行关闭。</p><pre class=" language-java"><code class="language-java"># ResultSet测试类<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TestResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取id=2的customer数据表中的记录</span>        <span class="token comment" spellcheck="true">//1.获取Connection</span>        Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement statement <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.获取Statement</span>            connection <span class="token operator">=</span> JDBCTools<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.准备SQL</span>            String sql <span class="token operator">=</span> <span class="token string">"select id, name, email, birth from customer where id = 2"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.执行查询，得到ResultSet</span>            rs <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.处理ResultSet</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String email <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Date birth <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>birth<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JDBCTools<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> statement<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里出现了一个连接数据库的小问题，报<font color="red">“Host ‘127.0.0.1’ is not allowed to connect to this MySQL server”</font>这个错误，那是因为MySQL的配置文件中设置了参数： <font color="red">skip-name-resolve</font>，将它注释了就行。</p><h2 id="面向对象编写JDBC程序"><a href="#面向对象编写JDBC程序" class="headerlink" title="面向对象编写JDBC程序"></a>面向对象编写JDBC程序</h2><p>1.将数据库的表的内容生成一个Java类，这类成为JavaBean，其中有数据库中的所有字段，还有对应的Setter和Getter方法，以及默认的构造函数和toString函数。</p><p>2.编写需要执行SQL语句，利用JavaBean的getter、setter方法来获取需要执行的操作。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 学习总结</title>
      <link href="/2020/02/11/mysql-xue-xi-zong-jie/"/>
      <url>/2020/02/11/mysql-xue-xi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-学习总结"><a href="#MySQL-学习总结" class="headerlink" title="MySQL 学习总结"></a>MySQL 学习总结</h1><p>&emsp;&emsp;经过4天的高效学习，把MySQL的基础基本都掌握了，持续的高效学习让我头晕目眩，真是累呢。</p><p>&emsp;&emsp;要感谢B站UP主<a href="https://space.bilibili.com/444162933?spm_id_from=333.788.b_765f7570696e666f.1" target="_blank" rel="noopener">代码基基</a>提供的学习资料，B站的链接（<a href="https://www.bilibili.com/video/av59623481?p=1" target="_blank" rel="noopener">点击这里</a>），主要看这里的学习，这是一位很有意思的女老师，沉迷于武侠小说，授课风格确实很有意思。</p><p>&emsp;&emsp;这里还有一份UP主提供的 <a href="/download/MYSQL复习宝典.edf" ">MySQL总结</a>，希望有所帮助</p><p>&emsp;&emsp;不说了，开始JDBC的学习吧！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 总结 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL-Diary6</title>
      <link href="/2020/02/11/mysql-diary6/"/>
      <url>/2020/02/11/mysql-diary6/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Diary6"><a href="#MySQL-Diary6" class="headerlink" title="MySQL Diary6"></a>MySQL Diary6</h1><h2 id="一、标识列"><a href="#一、标识列" class="headerlink" title="一、标识列"></a>一、标识列</h2><p>含义：可以不用手动插入值，系统提供默认的序列值。</p><p>特点：一个表至多一个标识列，而且必须是一个键，而且只能标识数值型。</p><h3 id="1-创建表时设置标识列"><a href="#1-创建表时设置标识列" class="headerlink" title="1.创建表时设置标识列"></a>1.创建表时设置标识列</h3><pre class=" language-mysql"><code class="language-mysql"># 使用AUTO_INCREMENT关键字CREATE TABLE tab_identity(    id INT PRIMARY KEY AUTO_INCREMENT    NAME VARCHAR(20)    )</code></pre><h3 id="2-可以设置步长，更改起始值"><a href="#2-可以设置步长，更改起始值" class="headerlink" title="2.可以设置步长，更改起始值"></a>2.可以设置步长，更改起始值</h3><pre class=" language-mysql"><code class="language-mysql"># 整个数据库都修改，一般不就修改SET auto_increment_increment = 3# 插入一个值即可设置起始值INSERT INTO tab_identity(id,name) VALUES(10,"john")</code></pre><h2 id="二、TCL语言（事务控制语言）"><a href="#二、TCL语言（事务控制语言）" class="headerlink" title="二、TCL语言（事务控制语言）"></a>二、TCL语言（事务控制语言）</h2><p>事务：事务由<strong>单独单元</strong>的一个或多个SQL语句组成，在这个单元中，每个MySQL语句是<strong>相互依赖</strong>的。而整个单独单元作为一个<strong>不可分割</strong>的整体，如果单元中某条SQL语句一旦执行失败或产生错误，整个单元将会<strong>回滚</strong>。所有受到影响的数据将返回到事物开始以前的状态；如果单元中的所有SQL语句均执行成功，则事物被顺利执行。</p><p>事务的ACID属性：</p><pre><code>1. **原子性（Atomicity）：**原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 2. **一致性（Consistency）：**事务必须使数据库从一个一致性状态变换到另外一个一致性状态 。</code></pre><ol start="3"><li><strong>隔离性（Isolation）：</strong>事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li><li><strong>持久性（Durability）：</strong>持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</li></ol><h3 id="1-事务的创建"><a href="#1-事务的创建" class="headerlink" title="1.事务的创建"></a>1.事务的创建</h3><p>1.隐式事务：事务没有明显的开启和结束的标记。比如insert，update，delete。</p><p>2.显示事务：事务具有明显的开启和结束的标记。必须先设置自动提交功能为禁用。<code>set auticommit = 0;</code></p><pre class=" language-mysql"><code class="language-mysql"># 步骤一：开启事务SET autocommit = 0;start transaction;# 步骤二：表写事务中的sql语句（select，insert，update，delete）语句1;语句2;...# 步骤三：结束事务commit; # 提交事务rollback; # 回滚事务# 例SET autocommit = 0;START TRANSACTION;UPDATE account SET balance = 500 WHERE username = '张无忌';UPDATE account SET balance = 1500 WHERE username = '赵敏';COMMIT;ROLLBACK;</code></pre><h3 id="2-事务并发的介绍"><a href="#2-事务并发的介绍" class="headerlink" title="2.事务并发的介绍"></a>2.事务并发的介绍</h3><p><strong>脏读:</strong> 对于两个事务T1, T2, T1 读取了已经被T2 更新但还没有被提交的字段. 之后, 若T2 回滚, T1读取的内容就是临时且无效的。<br>        <strong>不可重复读:</strong> 对于两个事务T1, T2, T1 读取了一个字段, 然后T2 更新了该字段. 之后, T1再次读取同一个字段, 值就不同了。<br>        <strong>幻读:</strong> 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后T2 在该表中插入了一些新的行. 之后, 如果T1 再次读取同一个表, 就会多出几行。</p><p><img src="/2020/02/11/mysql-diary6/%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.jpg" alt="隔离级别"></p><p>MySQL支持这四种隔离级别，默认为<strong>REPEATABLE READ</strong>。</p><h3 id="3-事务隔离演示"><a href="#3-事务隔离演示" class="headerlink" title="3.事务隔离演示"></a>3.事务隔离演示</h3><p>用命令行，进入mysql然后输入命令<code>select @@global.transaction_isolation,@@transaction_isolation;</code>，与5.0版本有所不同。</p><p><img src="/2020/02/11/mysql-diary6/%E6%9F%A5%E7%9C%8B%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.png" alt="查看隔离级别"></p><p>设置会话隔离级别<code>SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p><p>设置全局隔离级别<code>SET GLOBAL TRANSACTION ISOLATION LEVEL READ COMMITTED;</code></p><h3 id="4-回滚点介绍"><a href="#4-回滚点介绍" class="headerlink" title="4.回滚点介绍"></a>4.回滚点介绍</h3><pre class=" language-mysql"><code class="language-mysql">#3.演示savepoint 的使用SET autocommit=0;START TRANSACTION;DELETE FROM account WHERE id=25;SAVEPOINT a;#设置保存点DELETE FROM account WHERE id=28;ROLLBACK TO a;#回滚到保存点SELECT * FROM account;</code></pre><h2 id="三、视图"><a href="#三、视图" class="headerlink" title="三、视图"></a>三、视图</h2><p>含义：MySQL从5.0.1版本开始提供视图功能。一种虚拟存在的表，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时动态生成的，只保存了sql逻辑，不保存查询结果。</p><pre class=" language-mysql"><code class="language-mysql">#案例：查询姓张的学生名和专业名SELECT stuname,majornameFROM stuinfo sINNER JOIN major m ON s.`majorid`= m.`id`WHERE s.`stuname` LIKE '张%';CREATE VIEW v1ASSELECT stuname,majornameFROM stuinfo sINNER JOIN major m ON s.`majorid`= m.`id`;SELECT * FROM v1 WHERE stuname LIKE '张%';</code></pre><h3 id="1-创建视图"><a href="#1-创建视图" class="headerlink" title="1.创建视图"></a>1.创建视图</h3><pre class=" language-mysql"><code class="language-mysql">/*语法：create view 视图名as查询语句;*/USE myemployees;#1.查询姓名中包含a字符的员工名、部门名和工种信息#①创建CREATE VIEW myv1ASSELECT last_name,department_name,job_titleFROM employees eJOIN departments d ON e.department_id  = d.department_idJOIN jobs j ON j.job_id  = e.job_id;#②使用SELECT * FROM myv1 WHERE last_name LIKE '%a%';</code></pre><h3 id="2-修改视图"><a href="#2-修改视图" class="headerlink" title="2.修改视图"></a>2.修改视图</h3><pre class=" language-mysql"><code class="language-mysql">#方式一：/*create or replace view  视图名as查询语句;*/SELECT * FROM myv3 CREATE OR REPLACE VIEW myv3ASSELECT AVG(salary),job_idFROM employeesGROUP BY job_id;#方式二：/*语法：alter view 视图名as 查询语句;*/ALTER VIEW myv3ASSELECT * FROM employees;</code></pre><h3 id="3-删除视图"><a href="#3-删除视图" class="headerlink" title="3.删除视图"></a>3.删除视图</h3><pre class=" language-mysql"><code class="language-mysql">#三、删除视图/*语法：drop view 视图名,视图名,...;*/DROP VIEW emp_v1,emp_v2,myv3;</code></pre><h3 id="4-查看视图"><a href="#4-查看视图" class="headerlink" title="4.查看视图"></a>4.查看视图</h3><pre class=" language-mysql"><code class="language-mysql">DESC myv3;SHOW CREATE VIEW myv3;</code></pre><h3 id="5-更新视图"><a href="#5-更新视图" class="headerlink" title="5.更新视图"></a>5.更新视图</h3><pre class=" language-mysql"><code class="language-mysql">CREATE OR REPLACE VIEW myv1ASSELECT last_name,email,salary*12*(1+IFNULL(commission_pct,0)) "annual salary"FROM employees;CREATE OR REPLACE VIEW myv1ASSELECT last_name,emailFROM employees;SELECT * FROM myv1;SELECT * FROM employees;#1.插入INSERT INTO myv1 VALUES('张飞','zf@qq.com');#2.修改UPDATE myv1 SET last_name = '张无忌' WHERE last_name='张飞';#3.删除DELETE FROM myv1 WHERE last_name = '张无忌';#具备以下特点的视图不允许更新#①包含以下关键字的sql语句：分组函数、distinct、group  by、having、union或者union allCREATE OR REPLACE VIEW myv1ASSELECT MAX(salary) m,department_idFROM employeesGROUP BY department_id;SELECT * FROM myv1;#更新UPDATE myv1 SET m=9000 WHERE department_id=10;#②常量视图CREATE OR REPLACE VIEW myv2ASSELECT 'john' NAME;SELECT * FROM myv2;#更新UPDATE myv2 SET NAME='lucy';#③Select中包含子查询CREATE OR REPLACE VIEW myv3ASSELECT department_id,(SELECT MAX(salary) FROM employees) 最高工资FROM departments;#更新SELECT * FROM myv3;UPDATE myv3 SET 最高工资=100000;#④joinCREATE OR REPLACE VIEW myv4ASSELECT last_name,department_nameFROM employees eJOIN departments dON e.department_id  = d.department_id;#更新SELECT * FROM myv4;UPDATE myv4 SET last_name  = '张飞' WHERE last_name='Whalen';INSERT INTO myv4 VALUES('陈真','xxxx');#⑤from一个不能更新的视图CREATE OR REPLACE VIEW myv5ASSELECT * FROM myv3;#更新SELECT * FROM myv5;UPDATE myv5 SET 最高工资=10000 WHERE department_id=60;#⑥where子句的子查询引用了from子句中的表CREATE OR REPLACE VIEW myv6ASSELECT last_name,email,salaryFROM employeesWHERE employee_id IN(    SELECT  manager_id    FROM employees    WHERE manager_id IS NOT NULL);#更新SELECT * FROM myv6;UPDATE myv6 SET salary=10000 WHERE last_name = 'k_ing';</code></pre><h2 id="四、变量"><a href="#四、变量" class="headerlink" title="四、变量"></a>四、变量</h2><h3 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1.系统变量"></a>1.系统变量</h3><p>说明：变量由系统定义，不是用户定义，属于服务器层面<br>注意：全局变量需要添加global关键字，会话变量需要添加session关键字，如果不写，默认会话级别<br>使用步骤：<br>1、查看所有系统变量<br><code>show global|【session】variables;</code><br>2、查看满足条件的部分系统变量<br><code>show global|【session】 variables like &#39;%char%&#39;;</code><br>3、查看指定的系统变量的值<br><code>select @@global|【session】系统变量名;</code><br>4、为某个系统变量赋值<br>方式一：<br><code>set global|【session】系统变量名=值;</code><br>方式二：<br><code>set @@global|【session】系统变量名=值;</code></p><h3 id="2-自定义变量"><a href="#2-自定义变量" class="headerlink" title="2.自定义变量"></a>2.自定义变量</h3><pre class=" language-mysql"><code class="language-mysql">/*说明：变量由用户自定义，而不是系统提供的使用步骤：1、声明2、赋值3、使用（查看、比较、运算等）*/#1》用户变量/*作用域：针对于当前会话（连接）有效，作用域同于会话变量*/#赋值操作符：=或:=#①声明并初始化SET @变量名=值;SET @变量名:=值;SELECT @变量名:=值;#②赋值（更新变量的值）#方式一：    SET @变量名=值;    SET @变量名:=值;    SELECT @变量名:=值;#方式二：    SELECT 字段 INTO @变量名    FROM 表;#③使用（查看变量的值）SELECT @变量名;#2》局部变量/*作用域：仅仅在定义它的begin end块中有效应用在 begin end中的第一句话*/#①声明DECLARE 变量名 类型;DECLARE 变量名 类型 【DEFAULT 值】;#②赋值（更新变量的值）#方式一：    SET 局部变量名=值;    SET 局部变量名:=值;    SELECT 局部变量名:=值;#方式二：    SELECT 字段 INTO 具备变量名    FROM 表;#③使用（查看变量的值）SELECT 局部变量名;#案例：声明两个变量，求和并打印#用户变量SET @m=1;SET @n=1;SET @sum=@m+@n;SELECT @sum;#局部变量DECLARE m INT DEFAULT 1;DECLARE n INT DEFAULT 1;DECLARE SUM INT;SET SUM=m+n;SELECT SUM;</code></pre><table><thead><tr><th></th><th>作用域</th><th>定义和使用的位置</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话中的任何地方</td></tr><tr><td>局部变量</td><td>BEGIN END中</td><td>只能在BEGIN END中，且为第一句话</td></tr></tbody></table><h2 id="五、存储过程"><a href="#五、存储过程" class="headerlink" title="五、存储过程"></a>五、存储过程</h2><p><strong>说明：</strong>都类似于java中的方法，将一组完成特定功能的逻辑语句包装起来，对外暴露名字<br>        <strong>好处：</strong><br>1、提高重用性<br>2、sql语句简单<br>3、减少了和数据库服务器连接的次数，提高了效率</p><h3 id="一、创建"><a href="#一、创建" class="headerlink" title="一、创建"></a>一、创建</h3><pre class=" language-mysql"><code class="language-mysql">create procedure 存储过程名(参数模式 参数名 参数类型)begin        存储过程体end/*注意：1.参数模式：in、out、inout，其中in可以省略2.存储过程体的每一条sql语句都需要用分号结尾*/</code></pre><h3 id="二、调用"><a href="#二、调用" class="headerlink" title="二、调用"></a>二、调用</h3><pre class=" language-mysql"><code class="language-mysql">call 存储过程名(实参列表)#举例：#调用in模式的参数：call sp1（‘值’）;#调用out模式的参数：set @name; call sp1(@name);select @name;#调用inout模式的参数：set @name=值; call sp1(@name); select @name;### 三、查看show create procedure 存储过程名;</code></pre><h3 id="四、删除"><a href="#四、删除" class="headerlink" title="四、删除"></a>四、删除</h3><p><code>drop procedure 存储过程名;</code></p><h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><h3 id="一、创建-1"><a href="#一、创建-1" class="headerlink" title="一、创建"></a>一、创建</h3><pre class=" language-mysql"><code class="language-mysql">create function 函数名(参数名 参数类型) returns  返回类型begin    函数体end# 注意：函数体中肯定需要有return语句</code></pre><h3 id="二、调用-1"><a href="#二、调用-1" class="headerlink" title="二、调用"></a>二、调用</h3><p><code>select 函数名(实参列表);</code></p><h3 id="三、查看"><a href="#三、查看" class="headerlink" title="三、查看"></a>三、查看</h3><p><code>show create function 函数名;</code></p><h3 id="四、删除-1"><a href="#四、删除-1" class="headerlink" title="四、删除"></a>四、删除</h3><p><code>drop function 函数名；</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Diary5</title>
      <link href="/2020/02/10/mysql-diary5/"/>
      <url>/2020/02/10/mysql-diary5/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Diary5"><a href="#MySQL-Diary5" class="headerlink" title="MySQL Diary5"></a>MySQL Diary5</h1><h2 id="一、分页查询"><a href="#一、分页查询" class="headerlink" title="一、分页查询"></a>一、分页查询</h2><p>应用场景：当要显示的数据，一页显示不全，需要分页提交SQL请求</p><p>特点：①limit放在查询语句的最后。</p><p>&emsp;&emsp;&emsp;②公式<code>SELECT 查询列表 FROM 表 limit (page-1)*size, size</code></p><pre class=" language-mysql"><code class="language-mysql"># 语法select 查询列表from 表[join type] join 表2on 连接条件where 筛选条件group by 分组字段having 分组后的筛选order by limit offset，size;  # offset要显示的条目索引，size是显示条数# 案例：查询前五条员工信息SELECT * FROM emmployeesLIMIT 0,5;# 案例：查询11-25条SELECT *FROM employeesLIMIT 10,15;</code></pre><h2 id="二、联合查询"><a href="#二、联合查询" class="headerlink" title="二、联合查询"></a>二、联合查询</h2><p>union 合并：将多条查询语句的结果合并成一个结果。</p><pre class=" language-mysql"><code class="language-mysql"># 语法查询语句1union查询语句2案例：查询中国用户中男性的信息以及国外用户中男性的信息SELECT id,cname,csex FROM t_ca WHERE csex='男'UNION [ALL]SELECT t_id,tName,tGender FROM t_ua tGender='man';# 查询多个表且没有直接联系。# 查询列数需要保持一致# 字段名是第一条查询语句的字段名，要求查询语句的类型和顺序需要保持一致# UNION会自动去重，后面加上ALL可以加上重复项</code></pre><h2 id="三、插入语句"><a href="#三、插入语句" class="headerlink" title="三、插入语句"></a>三、插入语句</h2><h3 id="1-方式一"><a href="#1-方式一" class="headerlink" title="1.方式一"></a>1.方式一</h3><pre class=" language-mysql"><code class="language-mysql"># 语法INSERT INTO 表名 (字段名,...) value (值,...);</code></pre><p>1.插入的值得类型要与列的类型一致或者兼容。</p><p>2.不可以为null的列必须插入值，可以为null的值可以直接赋值为null，或者insert可以直接不写。</p><p>3.列的顺序可以调换。</p><p>4.列数和值的个数必须一致。</p><p>5.可以省略列名，默认所有列，而且顺序与表中的一致。</p><h3 id="2-方式二"><a href="#2-方式二" class="headerlink" title="2.方式二"></a>2.方式二</h3><pre class=" language-mysql"><code class="language-mysql"># 语法INSERT INTO 表名set 列名=值, 列名=值...;</code></pre><h3 id="3-比较"><a href="#3-比较" class="headerlink" title="3.比较"></a>3.比较</h3><p>1.方式一支持多行插入，方式二不行。</p><p>2.方式一支持子查询，方式二不行。</p><h2 id="四、修改语句"><a href="#四、修改语句" class="headerlink" title="四、修改语句"></a>四、修改语句</h2><h3 id="1-修改单表记录"><a href="#1-修改单表记录" class="headerlink" title="1.修改单表记录"></a>1.修改单表记录</h3><pre class=" language-mysql"><code class="language-mysql"># 语法UPDATE 表名SET 列=新值, 列=新值...WHERE 筛选条件</code></pre><h3 id="2-修改多表记录"><a href="#2-修改多表记录" class="headerlink" title="2.修改多表记录"></a>2.修改多表记录</h3><pre class=" language-mysql"><code class="language-mysql"># SQL92语法UPDATE 表1,表2...SET 列=值,...WHERE 连接条件and 筛选条件# SQL99语法UPDATE 表1INNER|left|right join 表2ON 连接条件SET 列=值WHERE 筛选条件</code></pre><h2 id="五、删除语句"><a href="#五、删除语句" class="headerlink" title="五、删除语句"></a>五、删除语句</h2><h3 id="1-方式1，delete"><a href="#1-方式1，delete" class="headerlink" title="1.方式1，delete"></a>1.方式1，delete</h3><pre class=" language-mysql"><code class="language-mysql"># 语法DELETE FROM 表名 WHERE 筛选条件;</code></pre><h3 id="2-方式2，truncate"><a href="#2-方式2，truncate" class="headerlink" title="2.方式2，truncate"></a>2.方式2，truncate</h3><pre class=" language-mysql"><code class="language-mysql"># 语法TRUNCATE TABLE 表名;</code></pre><h2 id="六、库的管理"><a href="#六、库的管理" class="headerlink" title="六、库的管理"></a>六、库的管理</h2><pre class=" language-mysql"><code class="language-mysql"># 语法# 库的创建CREATE DATABASE 库名;案例：CREATE DATABASE IF NOT EXISTS books;# 库的修改(不建议)# 更改字符集ALTER DATABASE books CHARACTER SET utf8#库的删除DROP DATABASE IF EXISTS books;</code></pre><h2 id="七、表的管理"><a href="#七、表的管理" class="headerlink" title="七、表的管理"></a>七、表的管理</h2><pre class=" language-mysql"><code class="language-mysql">### 语法## 表的创建create table 表名(    列名 列的类型【(长度)约束】,    列名 列的类型【(长度)约束】,    ...    列名 列的类型【(长度)约束】,    );## 表的修改#1.修改列名ALTER TABLE 表名 CHANGE COLUMN 旧列名 新列名 类型;#2.修改列的类型或约束ALTER TABLE 表名 MODIFY COLUMN 列名 类型;#3.添加列ALTER TABLE 表名 ADD COLUMN 列名 类型;#4.删除列ALTER TABLE 表名 DROP COLUMN;#5.修改表名ALTER TABLE 表名 RENAME 新表名;## 表的删除DROP TABLE IF EXISTS 表名;## 表的复制# 复制表的结构CREATE TABLE 新表名 LIKE 旧表名# 全部复制CREATE TABLE 新表名 SELECT * FROM 旧表名;</code></pre><h2 id="八、常见的数据类型"><a href="#八、常见的数据类型" class="headerlink" title="八、常见的数据类型"></a>八、常见的数据类型</h2><h3 id="1-数值型"><a href="#1-数值型" class="headerlink" title="1.数值型"></a>1.数值型</h3><h4 id="1-1-整形"><a href="#1-1-整形" class="headerlink" title="1.1 整形"></a>1.1 整形</h4><p><img src="/2020/02/10/mysql-diary5/%E6%95%B4%E5%BD%A2.png" alt="整型"></p><p>①不设置符号，默认是有符号，设置方法为unsigned。</p><p>②超出范围不报错，会变成临界值。</p><p>③如果不设置长度，会有默认长度。如果不够位数，会用0在左边填充。</p><h4 id="1-2-小数"><a href="#1-2-小数" class="headerlink" title="1.2 小数"></a>1.2 小数</h4><p><img src="/2020/02/10/mysql-diary5/%E5%B0%8F%E6%95%B0.png" alt="小数"></p><p>①M和D，D表示小数点后的位数，M表示整数和小数部位加起来的位数。</p><p>②M和D，都可以省略，DECIMAL默认为(10,0)。FLOAT和DOUBLE会随着值改变。</p><p>③定点形精度高。</p><h3 id="2-字符型"><a href="#2-字符型" class="headerlink" title="2.字符型"></a>2.字符型</h3><h4 id="2-1-较短文本"><a href="#2-1-较短文本" class="headerlink" title="2.1 较短文本"></a>2.1 较短文本</h4><p><img src="/2020/02/10/mysql-diary5/%E7%9F%AD%E6%96%87%E6%9C%AC.png" alt="短文本"></p><p>区别：char代表固定长度的字符，varchar表示可变长度的字符。也就一位置char性能比varchar高上一些。</p><h4 id="2-2-enum形"><a href="#2-2-enum形" class="headerlink" title="2.2 enum形"></a>2.2 enum形</h4><h4 id="2-3-set集合"><a href="#2-3-set集合" class="headerlink" title="2.3 set集合"></a>2.3 set集合</h4><h3 id="3-日期型"><a href="#3-日期型" class="headerlink" title="3.日期型"></a>3.日期型</h3><p><img src="/2020/02/10/mysql-diary5/%E6%97%A5%E6%9C%9F%E5%9E%8B.png" alt="日期型"></p><h2 id="九、常见约束"><a href="#九、常见约束" class="headerlink" title="九、常见约束"></a>九、常见约束</h2><p><strong>含义</strong>：一种<em>限制</em>，用于限制表中的数据，为了保证表中的数据的可靠性。</p><p><strong>分类：</strong><img src="/2020/02/10/mysql-diary5/%E5%85%AD%E5%A4%A7%E7%BA%A6%E6%9D%9F.png" alt="约束类型"></p><p><strong>NOT NULL:</strong> 非空，用于保证该字段的值不能为空比如姓名、学号等。<br>        <strong>DEFAULT:</strong>默认，用于保证该字段有默认值比如性别。<br>        <strong>PRIMARY KEY:</strong>主键，用于保证该字段的值具有唯一-性，并且非空比如学号、员工编号等。<br>        <strong>UNIQUE:</strong>唯一 ， 用于保证该字段的值具有唯一性，可以为空比如座位号。<br>        <strong>CHECK:</strong>检查约束[mysq1中不支持 ]比如年龄、性别。<br>        <strong>FOREIGN KEY:</strong>外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值。</p><p><strong>添加约束的时机：</strong>1.创建表时 2.修改表时。</p><pre class=" language-mysql"><code class="language-mysql">CREATE TABLE 表名(    字段名 字段类型 列级约束，    字段名 字段类型，    表级约束);</code></pre><p>例：添加列级约束。</p><pre class=" language-mysql"><code class="language-mysql">create database students;use students;CREATE TABLE major (id INT PRIMARY KEY,majorName VARCHAR (20));create table stuinfo(    id int primary key ,    stuName varchar(20) not null ,    gender CHAR(1) CHECK (gender='男' OR gender ='女'), #检查    seat INT UNIQUE, #唯一    age INT DEFAULT 18, #默认约束    majorId INT references major(id));</code></pre><p>例：添加表级约束</p><pre class=" language-mysql"><code class="language-mysql">DROP TABLE IF EXISTS stuinfo;CREATE TABLE stuinfo(id INT,stuname VARCHAR(20) ，gender CHAR(1) ,seat INT ,age INT,majorid INT,CONSTRAINT pk PRIMARY KEY(id) ,#主键CONSTRAINT uq UNIQUE (seat) ,#唯一键CONSTRAINT ck THECK(gender =' 男' OR gender = '女'), #检查CONSTRAINT fk_ stuinfo major FOREIGN KEY (majorid) REFERENCES major (id) #外键</code></pre><p><strong>主键和唯一的对比：</strong></p><table><thead><tr><th></th><th>保证唯一性</th><th>是否允许为空</th><th>一个表中可以有多少个</th><th align="center">是否允许组合</th></tr></thead><tbody><tr><td>主键</td><td>√</td><td>×</td><td>至少有一个</td><td align="center">允许但不建议</td></tr><tr><td>唯一</td><td>√</td><td>√</td><td>可以有多个</td><td align="center">允许但不建议</td></tr></tbody></table><p><strong>外键的特点：</strong></p><p>1.要求在从表设置外键关系。</p><p>2.从表的外键列的类型和主表要相同或兼容，名称无要求。</p><p>3.要求主表中的关联列必须是一个key（主键或唯一）。</p><p>4.插入数据时应该先插主表的数据，再加入从表。</p><p><strong>修改表时添加/删除约束：</strong></p><pre class=" language-mysql"><code class="language-mysql">## 添加约束#1.添加非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NOT NULL;#2.添加默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;#3.添加主键#①列级约束ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;#②表级约束ALTER TABLE stuinfo ADD PRIMARY KEY (id) ;#4.添加唯-#①列级约束ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE ;#②表级约束ALTER TABLE stuinfo ADD PRIMARI KEY (id) ;## 删除约束#1.删除非空约束ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;#2.删除默认约束ALTER TABLE stuinfo MODIFY COLUMN age INT ;#3.删除主键ALTER TABLE stuinfo DROP PRIMARY KEY ;#4.删除唯一ALTER TABLE stuinfo DROP INDEX seat;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Diary4</title>
      <link href="/2020/02/09/mysql-diary4/"/>
      <url>/2020/02/09/mysql-diary4/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Diary4"><a href="#MySQL-Diary4" class="headerlink" title="MySQL Diary4"></a>MySQL Diary4</h1><h2 id="一、分组查询"><a href="#一、分组查询" class="headerlink" title="一、分组查询"></a>一、分组查询</h2><pre class=" language-mysql"><code class="language-mysql"># 语法SELECT column,group_function(column)FROM table[WHERE condition][GROUP BY group_by_expression][ORDER BY column][HAVING condition];# 要求查询列表式分组函数或者group by后出现的字段</code></pre><h3 id="1-普通分组查询"><a href="#1-普通分组查询" class="headerlink" title="1.普通分组查询"></a>1.普通分组查询</h3><p>例1：查询每个工种最高的工资</p><pre class=" language-mysql"><code class="language-mysql">SELECT MAX(salary), job_id FROM employees GROUP BY job_id;</code></pre><p>例2：查询每个位置上的部门个数</p><pre class=" language-mysql"><code class="language-mysql">SELECT COUNT(*), locaton_id FROM departments GROUP BY location_id;</code></pre><p>例3：查询邮箱中包含a字符的，每个部门的平均工资（分组前的筛选）</p><pre class=" language-mysql"><code class="language-mysql">SELECT AVG(salary),department_id FROM employees WHERE email LIKE '%a%' GROUP BY department_id;</code></pre><p>例4：查询那个部门的员工个数大于2（分组后的筛选）</p><pre class=" language-mysql"><code class="language-mysql">SELECT COUNT(*),department_id FROM employees GROUP BY department_id HAVAING COUNT(*)>2;</code></pre><p>特点：1.分组查询筛选条件分为两类①分组前筛选，在原始表中，用where。②分组后筛选，在分组后的结果集，用having。</p><p>&emsp;&emsp;&emsp;2.分组函数做条件肯定是放在having字句中。</p><h3 id="2-按函数分组"><a href="#2-按函数分组" class="headerlink" title="2.按函数分组"></a>2.按函数分组</h3><p>例5：按员工姓名长度分组，查询每一组员工的个数，筛选员工个数大于5的有哪些。</p><pre class=" language-mysql"><code class="language-mysql">SELECT COUNT(*),LENGTH(last_name)WHERE employeesGROUP BY LENGTH(last_name)HAVING COUNT(*)>5;</code></pre><h3 id="3-按多个字段分组"><a href="#3-按多个字段分组" class="headerlink" title="3.按多个字段分组"></a>3.按多个字段分组</h3><p>例6：查询每个部门每个工种的员工的平均工资</p><pre class=" language-mysql"><code class="language-mysql">SELECT AVG(salary),department_id,job_idFROM employeesGROUP BY department_id,job_id;</code></pre><h3 id="4-添加排序"><a href="#4-添加排序" class="headerlink" title="4.添加排序"></a>4.添加排序</h3><pre class=" language-mysql"><code class="language-mysql">SELECT AVG(salary),department_id,job_idFROM employeesGROUP BY department_id,job_idORDER BY AVG(salary) DESC;</code></pre><h2 id="二、连接查询（多表查询）"><a href="#二、连接查询（多表查询）" class="headerlink" title="二、连接查询（多表查询）"></a>二、连接查询（多表查询）</h2><p>笛卡尔积现象：表1有m行，表2有n行，结果就有m*n</p><p>解决方案：添加连接条件</p><p>连接的分类：</p><pre class=" language-mermaid"><code class="language-mermaid">graph LR;按时间分类-->SQL99按时间分类-->SQL92按功能分类-->内连接按功能分类-->外连接按功能分类-->交叉连接内连接-->等值连接内连接-->非等值连接内连接-->自连接外连接-->左外连接外连接-->右外连接外连接-->全外连接</code></pre><h3 id="1-等值连接"><a href="#1-等值连接" class="headerlink" title="1.等值连接"></a>1.等值连接</h3><p>例1：查询员工名对应的部门名</p><pre class=" language-mysql"><code class="language-mysql">select last_name,dept_nofrom employees,departmentswhere departments.dept_no = employees.dept_no;</code></pre><p>例2：查询员工名、工种名、工种号</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name, e.job_id,j.titleFROM employees AS e, jobs AS jWHERE e.job_id = j.job_id;  #当表名过长时可以用起别名，但原来的表名就不能用了</code></pre><p>例3：查询有奖金的员工名、部门名</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name,department_name,comWHmission_pctFROM employees AS e,departments AS dWHERE e.department_id = d.departmentAND e.commission_pct IS NOT NULL;# 可以在AND后继续加上筛选条件</code></pre><p>例4：查询每个城市部门个数</p><pre class=" language-mysql"><code class="language-mysql">SELECT COUNT(*) AS 个数, cityFROM departments AS d,location AS lwhere d.location_id = l.location_idGROUP BY city;#连接查询是也可以分组</code></pre><p>例5：查询每个工种的工种名和员工个数，并且按员工个数降序</p><pre class=" language-mysql"><code class="language-mysql">SELECT job_title,COUNT(*)FROM employees e,jobs jWHERE e.job_id=j.job_idGROUP BY job_titleORDER BY COUNT(*) DESC;</code></pre><h3 id="2-非等值连接"><a href="#2-非等值连接" class="headerlink" title="2.非等值连接"></a>2.非等值连接</h3><p>例6：查询员工的工资和工资级别</p><pre class=" language-mysql"><code class="language-mysql">SELECT salary, grade_levelFROM employees,job_gradesWHERE salary BETWEEN g.lowest_sal AND g.highest_sal</code></pre><h3 id="3-自连接"><a href="#3-自连接" class="headerlink" title="3.自连接"></a>3.自连接</h3><p>例7：查询员工名和上级的名称</p><pre class=" language-mysql"><code class="language-mysql">SELECT e.employee_id,e.last_name,m.employee_id,m.last_nameFROM employees e,employees mWHERE e.manage_id = m.employee_id</code></pre><h3 id="4-SQL99-等值连接"><a href="#4-SQL99-等值连接" class="headerlink" title="4.SQL99 等值连接"></a>4.SQL99 等值连接</h3><pre class=" language-mysql"><code class="language-mysql">#SQL99连接语法select 查询列表from 表1别名 [连接类型 ]join 表2别名on 连接条件[where 筛选条件] [group by 分组][having 筛选条件][order by 排序列表];# 内连接：inner# 外连接：左外：left outer， 右外：right outer，全外：full outer#交叉连接：cross</code></pre><p>例8：查询员工名，部门名</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name,department_nameFROM departments dINNER JOIN employees eON e.department_id = d.department_id;</code></pre><h3 id="5-SQL99-非等值连接"><a href="#5-SQL99-非等值连接" class="headerlink" title="5.SQL99 非等值连接"></a>5.SQL99 非等值连接</h3><p>例9：查询员工的工资级别</p><pre class=" language-mysql"><code class="language-mysql">SELECT salary, grande_levelFROM employees eJOIN job_grades gON e.salary BETWEEN g.lowest AND g.highest</code></pre><h3 id="6-SQL99-自连接"><a href="#6-SQL99-自连接" class="headerlink" title="6.SQL99 自连接"></a>6.SQL99 自连接</h3><p>例10：查询员工名和上级名</p><pre class=" language-mysql"><code class="language-mysql">SELECT e.last_name,m.last_nameFROM employees eJOIN employees mON e.manager_id = m.employee_id</code></pre><h3 id="7-外连接"><a href="#7-外连接" class="headerlink" title="7.外连接"></a>7.外连接</h3><p>例11：查询没有男朋友的女神名</p><pre class=" language-mysql"><code class="language-mysql"># 特点：外连接的查询的结果为主表中的所有记录，如果从表中有和她匹配的，则显示匹配的值，没有则显示NULL。SELECT b.name, bo.*FROM beauty bLEFT OUTER JOIN boys boON b.boyfriend_id = bo.idWHERE bo.id IS NULL</code></pre><h2 id="三、子查询"><a href="#三、子查询" class="headerlink" title="三、子查询"></a>三、子查询</h2><p>含义：出现在其他语句中的select语句，称为子查询或内查询</p><p>分类：</p><p>①按子查询出现的位置：select后面，from后面，where或having后面，exists后面</p><p>②按结果集的行列数不同：标量子查询，列子查询，行子查询，表子查询</p><h3 id="1-where或者having后面的"><a href="#1-where或者having后面的" class="headerlink" title="1.where或者having后面的"></a>1.where或者having后面的</h3><h4 id="1-1标量子查询（单行子查询）"><a href="#1-1标量子查询（单行子查询）" class="headerlink" title="1.1标量子查询（单行子查询）"></a>1.1标量子查询（单行子查询）</h4><p>例1：谁的工资Abei高</p><pre class=" language-mysql"><code class="language-mysql">SELECT *FROM employeesWHERE salary>(    SELECT salary    FROM employees    WHERE last_name = 'Abel');</code></pre><p>例2：工资最少的员工的信息</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM employeesWHERE salary=(    SELECT MIN(salary)    FROM employees    );</code></pre><p>例3：最低工资大于50号部门最低工资的部门id和其最低工资</p><pre class=" language-mysql"><code class="language-mysql">SELECT MIN(salary),department_idFROM employeesGROUP BY department_idHAVING MIN(salary)>(    SELECT MIN(salary)    FROM employees    WHERE department_id = 50)</code></pre><h4 id="1-2-列子查询"><a href="#1-2-列子查询" class="headerlink" title="1.2 列子查询"></a>1.2 列子查询</h4><p><img src="/2020/02/09/mysql-diary4/%E5%88%97%E5%AD%90%E6%9F%A5%E8%AF%A2.png" alt="列子查询"></p><p>例4：返回location_id是1400或1700的部门中的所有员工姓名</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_nameFROM employeesWHEREdepartment_id IN(    SELECT DISTINCT department_id    FROM departments    WHERE location_id IN(1400,1700)    );</code></pre><p>例5：其他部门中job_id 为‘IT_PROG’部门任一工资低的员工的员工号、姓名</p><pre class=" language-mysql"><code class="language-mysql">SELECT last_name,employee_id,job_id,salaryFROM employeesWHERE salary< ANY(    SELECT DISTINCT salaryFROM employeees    WHERE job_id = 'IT_PROG') AND job_id <>'IT_PROG';</code></pre><h4 id="1-4-行子查询"><a href="#1-4-行子查询" class="headerlink" title="1.4 行子查询"></a>1.4 行子查询</h4><p>例6：查询员工编号最小并且工资最高的员工信息</p><pre class=" language-mysql"><code class="language-mysql">SELECT *FROM employeesWHERE (employee_id,salary)=(    SELECT MIN(employee_id),MAX(salary)    FROM employees    );</code></pre><h3 id="2-select后面的"><a href="#2-select后面的" class="headerlink" title="2.select后面的"></a>2.select后面的</h3><p>例7：查询每个部门的员工个数</p><pre class=" language-mysql"><code class="language-mysql">SELECT d.*,(    SELECT COUNT(*)    FROM employees AS e    WHERE e.department_id = d.department_id    )    FROM departments AS d;</code></pre><h3 id="3-from后面"><a href="#3-from后面" class="headerlink" title="3.from后面"></a>3.from后面</h3><p>例8：查询每个部门的平均工资的工资等级</p><pre class=" language-mysql"><code class="language-mysql">SELECT  ag_depFROM (       SELECT AVG(salary),deparmtment_id    FROM employees    GROUP BY department_id    ) AS ag_depINNER JOIN job_grades AS gOn ag_dep.ag BETWEEN lowest_sal AND higtest_sal</code></pre><h3 id="4-exists后面（相关子查询）"><a href="#4-exists后面（相关子查询）" class="headerlink" title="4.exists后面（相关子查询）"></a>4.exists后面（相关子查询）</h3><p>exists返回1或者0，一般不用。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Diary3</title>
      <link href="/2020/02/09/mysql-diary3/"/>
      <url>/2020/02/09/mysql-diary3/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Diary3"><a href="#MySQL-Diary3" class="headerlink" title="MySQL Diary3"></a>MySQL Diary3</h1><h2 id="一、排序查询"><a href="#一、排序查询" class="headerlink" title="一、排序查询"></a>一、排序查询</h2><p>语法：<code>SEKECT 查询列表 FROM 表 【WHERE 筛选条件】ORDER BY 【asc|desc】</code></p><p>例：查询员工信息，要求工资从高到低排序</p><p><code>SELECT * FROM enployees ORDER BY salary DESC;</code></p><p>例：查询部门编号大于等于90的员工信息，按入职时间先后将进行排序</p><p><code>SELECT * FROM employees WHERE department_id&gt;=90 ORDER BY hiredate ASC;</code></p><p>例：按年薪的高低显示员工的信息</p><p><code>SELECT *, salary*12*(1+ifnull(commission+_pct,0)) ORDER BY salary*12*(1+ifnull(commission+_pct,0)) DESC;</code></p><p><code>SELECT *, salary*12*(1+ifnull(commission+_pct,0)) AS 年薪ORDER BY 年薪 DESC;</code></p><p>例: 查询员工信息，要求先按工资排序，再按员工编号查询</p><p><code>SELECT * FROM employess ORDER BY salary ASC, employee_id DESC;</code></p><p>特点：① asc代表升序，的说辞代表的是降序，不写默认升序</p><p>&emsp;&emsp;&emsp;② 可以用别名进行排序</p><p>&emsp;&emsp;&emsp;③ 可以按表达式、函数、单个字段、多个字段</p><p>&emsp;&emsp;&emsp;④ 一般放到查询语句最后，limit语句除外</p><h2 id="二、常见函数"><a href="#二、常见函数" class="headerlink" title="二、常见函数"></a>二、常见函数</h2><p>概念：将一组逻辑语句封装在方法体中，对外暴露方法名。</p><p>好处： 1.隐藏实现细节  2.提高代码的重用性</p><p>调用： <code>SELECT 函数名(实参列表) 【FROM 表】;</code></p><h3 id="1-单行函数"><a href="#1-单行函数" class="headerlink" title="1.单行函数"></a>1.单行函数</h3><h4 id="1-1-字符函数"><a href="#1-1-字符函数" class="headerlink" title="1.1 字符函数"></a>1.1 字符函数</h4><p>① LENGTH：获取参数值的字节长度</p><p>例：<code>SELECT LENGTH(&#39;john&#39;);</code></p><p>②CONCAT：连接两个字符串</p><p>例：<code>SELECT CONCAT(&#39;john&#39;,&#39;love&#39;);</code></p><p>例：<code>SELECT CONCAT(last_name, &#39;,&#39;, first_name) AS 姓名 FROM employees</code></p><p>③ UPPER、LOWER：将字符参数转化为大写、小写</p><p>例：将姓变成大写，名变成小写<code>SELECT CONCAT(UPPER(last_name),LOWER(first_name)) FROM employees;</code></p><p>④ substr、substring；删除字符串</p><p>例：<code>SELECT SUBSTR(&#39;LULOVELU&#39;,6); #截取索引6以后的所有字符 ELU;</code></p><p>例：<code>SELECT SUBSTR(&#39;LULOVELU&#39;,3,4); #截取索引3开始的4个字符LOVE</code></p><p>⑤ INSTR：返回子串第一次出现的索引</p><p>例：<code>SELECT INSTR(&#39;我爱你杨璐璐&#39;,&#39;杨璐璐&#39;); #4</code></p><p>⑥ TRIM：去除空格</p><p>例：<code>SELECT TRIM(&#39;     LULU      &#39;); # LULU</code></p><p>例：<code>SELECT TRIM(&#39;a&#39; FROM &#39;aaaaaaLULUaaaaa&#39;); #LULU</code></p><p>⑦ LPAD/RPAD：用指定的字符左/右填充指定长度</p><p>例：<code>SELECT LPAD(&#39;LULU&#39;,10,&#39;*&#39;); #******LULU</code></p><p>⑨ REPLACE：替换</p><p>例：<code>SELECT REPLACE(&#39;LULULULU&#39;,&#39;LU&#39;,&#39;DONG&#39;); #DONGDONGDONGDONG</code></p><h4 id="1-2-数学函数"><a href="#1-2-数学函数" class="headerlink" title="1.2 数学函数"></a>1.2 数学函数</h4><p>① ROUND：四舍五入,默认保留整数</p><p>例：<code>SELECT ROUND(1.55); # 2.0</code></p><p>例：<code>SELECT ROUNT(1.55,2); #1.6</code></p><p>② CEIL： 向上取整</p><p>例：<code>SELECT CEIL(1.02); # 2</code></p><p>④ FLOOR：向下取整</p><p>例：<code>SELECT FLOOR(1.01); # 1</code></p><p>⑤ TRUNCATE：截断</p><p>例：<code>SELECT TRUNCATE(1.69999,1); #1.6</code></p><p>⑥ MOD：取余</p><p>例：<code>SELECT MOD(10, 3); # 1 相当于SELECT 10%3</code></p><h4 id="1-3-日期函数"><a href="#1-3-日期函数" class="headerlink" title="1.3 日期函数"></a>1.3 日期函数</h4><p>① NOW：返回当前系统日期+时间</p><p>例：<code>SELECT NOW(); # YYYY-MM-DD HH:MM:SS</code></p><p>② CURDATE：只返回当前的系统日期</p><p>例：<code>SELECT CURDATE(); # YYYY-MM-DD</code></p><p>③ CRUTIEM：只返回当前的系统时间</p><p>例：<code>SEKECT CURTIME(); # HH:MM:SS</code></p><p>④ YEAR，MONTH，DAY：返回日期类型的对应。</p><p>⑤str_to_date: 将日期格式的字符转换成指定格式的日期</p><p>例：<code>SELECT STR_TO_DATE(&#39;1998-3-2&#39;,&#39;%Y-%c-%d&#39;)</code></p><p><img src="/2020/02/09/mysql-diary3/%E6%A0%BC%E5%BC%8F.png" alt="格式表"></p><p>⑥ date_format：将日期转换为字符</p><p>例：<code>SELECT DATE_FORMAT(NOW(),&#39;%y年%m每月%d日&#39;);</code></p><h4 id="1-4-其他函数"><a href="#1-4-其他函数" class="headerlink" title="1.4 其他函数"></a>1.4 其他函数</h4><p>① VERSION：版本</p><p>② DATABASE：当前的数据库</p><p>③ USER： 当前用户</p><h4 id="1-5-流程控制函数"><a href="#1-5-流程控制函数" class="headerlink" title="1.5 流程控制函数"></a>1.5 流程控制函数</h4><p>① IF ：判断</p><p>例：<code>SELECT IF(commission_pct IS NULL, &quot;没奖金&quot;, &quot;有奖金&quot;);</code></p><p>② CASE：流程控制</p><p>语法 ：</p><pre class=" language-mysql"><code class="language-mysql">case 要判断的字段或表达式when 常量1 then 要显示的值1或语句1;when 常量2 then 要显示的值2或语句2；...else 要显示的默认值或默认表达式;end;</code></pre><h3 id="2-分组函数"><a href="#2-分组函数" class="headerlink" title="2.分组函数"></a>2.分组函数</h3><p>功能：用作统计使用，又称为聚合函数或统计函数或组函数。</p><p>分类：sum，avg，max，min，count</p><h4 id="2-1-简单的使用"><a href="#2-1-简单的使用" class="headerlink" title="2.1  简单的使用"></a>2.1  简单的使用</h4><pre class=" language-mysql"><code class="language-mysql">SELECT SUM(salary) FROM employees;SELECT AVG(salary) FROM employees;SELECT MIN(salary) FROM employees;SELECT MAX(salary) FROM employees;SELECT COUNT(salary) FROM employees;SELECT SUM(salary) AS 总值,AVG(salary) AS 平均值 FROM employees;</code></pre><h4 id="2-2-参数支持的类型"><a href="#2-2-参数支持的类型" class="headerlink" title="2.2 参数支持的类型"></a>2.2 参数支持的类型</h4><p>① sum、avg一般处理数值型，min、max、count都支持</p><p>② sum、avg、min、max、count都忽略了NULL值，</p><h4 id="2-3-可以和distinct搭配"><a href="#2-3-可以和distinct搭配" class="headerlink" title="2.3 可以和distinct搭配"></a>2.3 可以和distinct搭配</h4><pre class=" language-mysql"><code class="language-mysql">SELECT SUM(DISTINCT salary),SUM (salary FROM employees);# 去重</code></pre><h4 id="2-4-count函数的详细介绍"><a href="#2-4-count函数的详细介绍" class="headerlink" title="2.4 count函数的详细介绍"></a>2.4 count函数的详细介绍</h4><pre class=" language-mysql"><code class="language-mysql">SELECT COUNT(salary) FROM employees;SELECT COUNT(*) FROM employees; # 用于统计数目SELECT COUNT(1) FROM employees; # 相当于加了一列常量值统计个数</code></pre><h4 id="2-5-和分组函数一同查询的字段有限制"><a href="#2-5-和分组函数一同查询的字段有限制" class="headerlink" title="2.5 和分组函数一同查询的字段有限制"></a>2.5 和分组函数一同查询的字段有限制</h4><p>和分组查询一同字段要求是group by后的字段</p><p>​             </p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Diary2</title>
      <link href="/2020/02/08/mysql-diary2/"/>
      <url>/2020/02/08/mysql-diary2/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Dairy2"><a href="#MySQL-Dairy2" class="headerlink" title="MySQL Dairy2"></a>MySQL Dairy2</h1><h2 id="一、基础查询"><a href="#一、基础查询" class="headerlink" title="一、基础查询"></a>一、基础查询</h2><p>&emsp;&emsp;语法：<code>SELECT 查询列表 FROM 表名</code></p><p>&emsp;&emsp;特点：①查询列表可以是表中字段、常量值、表达式、函数</p><p>  &emsp;&emsp;  ②查询的结果是一个虚拟的表格</p><h3 id="1-查询表中的字段"><a href="#1-查询表中的字段" class="headerlink" title="1.查询表中的字段"></a>1.查询表中的字段</h3><p>&emsp;&emsp;查询表中的字段可以是单个也可以是多个，多个中间用逗号隔开</p><p>&emsp;&emsp;例：查询employees表中的last_name项</p><p>&emsp;&emsp;<code>SELECT last_name FROM employees;</code></p><p>&emsp;&emsp;例：查询employees表中的first_name和last_name项</p><p>&emsp;&emsp;<code>SELECT last_name, first_name FROM employees;</code></p><p>&emsp;&emsp;例：查询employees表中的所有字段</p><p>&emsp;&emsp;<code>SELECT * FROM employees;</code></p><h3 id="2-查询常量值"><a href="#2-查询常量值" class="headerlink" title="2.查询常量值"></a>2.查询常量值</h3><p>&emsp;&emsp;可以是数字也可以是字符串</p><p>&emsp;&emsp;例：查询常量100</p><p>&emsp;&emsp;<code>SELECT 100;</code></p><p>&emsp;&emsp;例：查询常量abc</p><p>&emsp;&emsp;<code>SELECT &#39;abc&#39;;</code></p><h3 id="3-查询常量表达式"><a href="#3-查询常量表达式" class="headerlink" title="3.查询常量表达式"></a>3.查询常量表达式</h3><p>&emsp;&emsp;可以查询数学表达式</p><p>&emsp;&emsp;例：查询100*98</p><p>&emsp;&emsp;<code>SELECT 100*98;</code></p><h3 id="4-查询函数"><a href="#4-查询函数" class="headerlink" title="4.查询函数"></a>4.查询函数</h3><p>&emsp;&emsp;例：查询版本号</p><p>&emsp;&emsp;<code>SELECT VERSION();</code></p><h3 id="5-起别名"><a href="#5-起别名" class="headerlink" title="5.起别名"></a>5.起别名</h3><p>&emsp;&emsp;使用AS关键字能给查询的字段起别名</p><p>&emsp;&emsp;例：查询employees中的last_name并改名为姓名</p><p>&emsp;&emsp;<code>SELECT last_name AS 姓名 FROM employees;</code></p><p>&emsp;&emsp;例：查询100*98 改名为结果</p><p>&emsp;&emsp;<code>SELECT 100*98 AS 结果;</code></p><h4 id="6-去重"><a href="#6-去重" class="headerlink" title="6.去重"></a>6.去重</h4><p>&emsp;&emsp;使用DISTINCT 关键字去重</p><p>&emsp;&emsp;例：查询employees中涉及到的所有部门编号</p><p>&emsp;&emsp;<code>SELECT DISTINCT dapartment_id FROM employees;</code></p><h3 id="7-号的作用"><a href="#7-号的作用" class="headerlink" title="7. +号的作用"></a>7. +号的作用</h3><p>&emsp;&emsp;+号只有运算符的作用</p><p>&emsp;&emsp;1.两个操作数都为数值型，则做加法运算。</p><p>&emsp;&emsp;例：<code>SELECT 100+900;</code></p><p>&emsp;&emsp;2.其中一个为字符型，则试图将字符型型数值转化为数值型，如果转化成功则继续做加法运算,如果失败则会将字符型数值转化为0。</p><p>&emsp;&emsp;例：<code>SELECT &#39;123&#39;+90 -&gt;SELECT 213;</code></p><p>&emsp;&emsp;<code>SELECT &#39;abc&#39;+90 -&gt; SELECT 90;</code></p><p>&emsp;&emsp;3.如果两边任意一边null，则结果为null</p><p>&emsp;&emsp;4.字符串拼接用CONCAT()函数</p><p>&emsp;&emsp;例：从employees表中选择last_name和first_name ，并拼接</p><p>&emsp;&emsp;<code>SELECT CONCAT(last_name, first_name) AS 姓名 FROM employees;</code></p><h2 id="二、条件查询"><a href="#二、条件查询" class="headerlink" title="二、条件查询"></a>二、条件查询</h2><p>&emsp;&emsp;语法：<code>SELECT 查询列表 FROM 表名 WHERE 筛选条件;</code></p><h3 id="1-按条件表达式筛选"><a href="#1-按条件表达式筛选" class="headerlink" title="1.按条件表达式筛选"></a>1.按条件表达式筛选</h3><p>&emsp;&emsp;条件运算符：&gt;, &lt;, =, !=, &lt;&gt;, &gt;=, &lt;=</p><p>&emsp;&emsp;例：查询工资大于12000的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employees WHERE salary&gt;12000;</code></p><p>&emsp;&emsp;例： 查询编号不等于90的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employees WHRER department_id&lt;&gt;90;</code></p><h3 id="2-按逻辑表达式筛选"><a href="#2-按逻辑表达式筛选" class="headerlink" title="2.按逻辑表达式筛选"></a>2.按逻辑表达式筛选</h3><p>&emsp;&emsp;逻辑运算符：&amp;&amp;,||,!(and, or, not)</p><p>&emsp;&emsp;例：查询工资大于12000且小于20000的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employees WHERE salary&lt;20000 and salary&gt;12000;</code></p><p>&emsp;&emsp;例：查询员工工资大于20000或者小于5000的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employess WHERE salary&lt;5000 or salary&gt;20000;</code></p><h3 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3.模糊查询"></a>3.模糊查询</h3><p>&emsp;&emsp;条件运算符：like，between and， in， is null||is not null</p><h4 id="emsp-emsp-3-1-like"><a href="#emsp-emsp-3-1-like" class="headerlink" title="&emsp;&emsp;3.1 like"></a>&emsp;&emsp;3.1 like</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询员工名中包含字符a的员工信息</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT * FROM employees WHERE last_name LIKE &#39;%a%;&#39;</code></p><p>&emsp;&emsp;&emsp;&emsp;通配符：</p><p>&emsp;&emsp;&emsp;&emsp;① % ：匹配0个或任意个字符</p><p>&emsp;&emsp;&emsp;&emsp;② _ : 匹配单个运算符</p><p>&emsp;&emsp;&emsp;&emsp;例：查询员工姓名第三个字符为a，第五个字符为e的员工名</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name FROM employees WHERE last_name LIKE &#39;__a_e%;&#39;</code></p><h4 id="emsp-emsp-3-2-between-and"><a href="#emsp-emsp-3-2-between-and" class="headerlink" title="&emsp;&emsp;3.2 between and"></a>&emsp;&emsp;3.2 between and</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询员工编号在100到120之间的员工信息</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT * FROM employees WHERE employees BETWEEN 100 AND 120;</code></p><p>&emsp;&emsp;&emsp;&emsp;① 前后条件不允许颠倒</p><p>&emsp;&emsp;&emsp;&emsp;② 包含两个临界值</p><h4 id="emsp-emsp-3-3-in"><a href="#emsp-emsp-3-3-in" class="headerlink" title="&emsp;&emsp;3.3 in"></a>&emsp;&emsp;3.3 in</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询员工公众编号IT_PROG、AD_VP的以一个员工名和工种编号</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name,job_id FROM employees WHERE IN(&#39;IT_PROG、AD_VP&#39;);</code></p><h4 id="emsp-emsp-3-4-is-null-is-not-null"><a href="#emsp-emsp-3-4-is-null-is-not-null" class="headerlink" title="&emsp;&emsp;3.4 is null/is not null"></a>&emsp;&emsp;3.4 is null/is not null</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询没有奖金的员工名和奖金率</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name, commission_pct FROM employees WHERE commission_pct IS NULL;</code></p><h4 id="emsp-emsp-3-5-安全等于-lt-gt"><a href="#emsp-emsp-3-5-安全等于-lt-gt" class="headerlink" title="&emsp;&emsp;3.5 安全等于&lt;=&gt;"></a>&emsp;&emsp;3.5 安全等于&lt;=&gt;</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询没有奖金的员工名和奖金率</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name, commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Diary1</title>
      <link href="/2020/02/08/mysql-diary1/"/>
      <url>/2020/02/08/mysql-diary1/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Diary1"><a href="#MySQL-Diary1" class="headerlink" title="MySQL Diary1"></a>MySQL Diary1</h1><h2 id="1-学习数据库的原因"><a href="#1-学习数据库的原因" class="headerlink" title="1.学习数据库的原因"></a>1.学习数据库的原因</h2><p>保存在内存的数据易失，保存在文件中不方便查询。</p><p>保存在数据库中的<strong>原因</strong>:</p><p>1.实现数据的持久化。</p><p>2.使用完整的管理系统统一管理，易于查询。</p><h2 id="2-数据库的相关概念"><a href="#2-数据库的相关概念" class="headerlink" title="2.数据库的相关概念"></a>2.数据库的相关概念</h2><p><strong>DB:</strong>数据库（database），存储数据的“仓库”。它保存了一系列有组织的数据</p><p><strong>DBMS：</strong>数据库管理系统（Database Management System），数据库是铜鼓DBMS创建和操作的容器</p><p><strong>SQL：</strong>结构化查询语言（Structure Query Language），专门用来与数据库通信的语言。</p><h2 id="3-数据库的特点"><a href="#3-数据库的特点" class="headerlink" title="3.数据库的特点"></a>3.数据库的特点</h2><p><strong>1.</strong>将数据放到表中，表再放到库中</p><p><strong>2.</strong>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己，表名具有唯一性。</p><p><strong>3.</strong>表具有一些特性，这些特性定义了数据在表中如何存储，类似java中“类”的设计。</p><p><strong>4.</strong>表由列组成，我们也称为字段。所有的表都是由一个或多个列组成的，每一列都类似java中的“属性”。</p><p><strong>5.</strong>表中的数据是安航存储的，每一行类似于java中的“对象”。</p><h2 id="4-数据库安装时的一些问题"><a href="#4-数据库安装时的一些问题" class="headerlink" title="4.数据库安装时的一些问题"></a>4.数据库安装时的一些问题</h2><p><strong>安装前的了解</strong></p><p>DBMS分为两类：基于共享文件系统的DBMS（Access），基于客户机—服务器的DBMS（MySQL）</p><p><strong>官方下载的网址：</strong><a href="http://dev.mysql.com/downloads/mysql" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql</a>，版本比较多，博主喜欢尝鲜所以用的是最新的8.0版</p><p><strong>出现的问题：</strong>安装的时候出现问题可能是之前的数据库没有卸载干净，可以去把安装路径文件删除和C盘的隐藏文件program data里的MySQL删除，并清楚一下注册表。（注意：一定要记住密码！！！忘了很麻烦！！！）</p><p><strong>MySQL的服务启动：</strong>服务需要启动，否则无法进入。</p><p>1.启动方法打开任务管理器，点击服务，找到MySQL的那一项，后面的数字可能有所不同，但是并无大碍。<img src="/2020/02/08/mysql-diary1/MySQL服务启动.png" alt="MySQL服务启动" style="zoom:100%;"></p><p>2.命令行方式，用管理员方式打开命令行，输入<code>net start MySQL80</code>(后缀的数字看你自己的)，关闭同理用<code>net stop MySQL80</code>。</p><h2 id="5-MySQL服务端的登录和退出"><a href="#5-MySQL服务端的登录和退出" class="headerlink" title="5.MySQL服务端的登录和退出"></a>5.MySQL服务端的登录和退出</h2><h3 id="1-登录方法"><a href="#1-登录方法" class="headerlink" title="1.登录方法"></a>1.登录方法</h3><p>1.用MySQL的命令行，MySQL 8.0 command line进入。（只适用于ROOT用户）</p><p>2.用cmd进入。输入<code>mysql -u root -p</code>再输入密码即可进入。</p><p>3.用MySQL安装时自带的MySQL workbench进入。</p><p>4.用其他可视化工具，例如Jet Brain公司的DataGrip进入。</p><h3 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h3><p>1.登录前必须保证服务是启动的。</p><p>2.如果在安装MySQL的时候没有配置环境变量，用第二种方式登录的时候需要配置环境变量。具体的配置方法如下：</p><p>右键此电脑点击属性-&gt;点击右侧的高级系统设置-&gt;点击环境变量-&gt;找到系统变量下的path-&gt;点击编辑-&gt;将你MySQL安装路径下的bin的路径复制添加即可（我的是C:\Program Files\MySQL\MySQL Server 8.0\bin）。</p><p>重启cmd，然后输入<code>mysql -u root -p</code>再输入密码即可。</p><p>3.如果出现<code>[Mysql Lost connection to MySQL server at ‘reading initial communication packet&#39;, system error: 0]</code>错误，需要修改<code>C:\ProgramData\MySQL\MySQL Server 8.0</code>下的my.ini文件，找到[mysqld]区域添加<code>skip-name-resolve</code>即可。</p><h2 id="6-MySQL的常见命令"><a href="#6-MySQL的常见命令" class="headerlink" title="6.MySQL的常见命令"></a>6.MySQL的常见命令</h2><table><thead><tr><th>代码</th><th align="left">作用</th></tr></thead><tbody><tr><td>show databases;</td><td align="left">显示所有的数据库</td></tr><tr><td>use ***;</td><td align="left">进入某个数据库，***为数据库名称</td></tr><tr><td>show tables;</td><td align="left">显示这个数据库的所有表</td></tr><tr><td>show tables from ***;</td><td align="left">显示***这个数据库里的所有表</td></tr><tr><td>select database();</td><td align="left">显示你所在的数据库</td></tr><tr><td>select version();</td><td align="left">显示数据库版本</td></tr></tbody></table><h2 id="7-MySQL语法规范"><a href="#7-MySQL语法规范" class="headerlink" title="7.MySQL语法规范"></a>7.MySQL语法规范</h2><p>1.不区分大小写，建议关键字大写，表名、列名小写</p><p>2.每条命令用分号结尾。</p><p>3.根据需要，命令可以进行缩进或者换行。</p><p>4.注释。</p><p>  单行注释：#注释文字</p><p>  多行注释：/*注释文字*/</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对寒假前半段时间的总结</title>
      <link href="/2020/02/08/dui-han-jia-qian-ban-duan-shi-jian-de-zong-jie/"/>
      <url>/2020/02/08/dui-han-jia-qian-ban-duan-shi-jian-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>​        寒假的时间已经过去将近一半了，这个寒假前期因为一些家事奔波于老家和山东之间，也不知道这个<strong><em>新冠病毒</em></strong>会发展的如此迅速，导致这个寒假的所有计划都打乱了。好多人没见，好多事干不成，真的是太难过了。</p><p>​        学习方面的话首先把<strong>Spring</strong>的基础部分差不多整完了，虽然学习量不是很大，但是比以前寒假从来没有学习过要好很多了，希望在接下来的很长一段时间内能够学习到更多 的东西。发现现阶段学<strong>Spring</strong>还有些吃力，比如开发的架构还有一些基础不是很好，所以打算在此先告一段落了，从一些简单的开始学习，下午制定一下学习路线开始新的学习计划。</p><p>​        <strong>璐璐宝贝</strong>这个寒假好像只见了两次，时间还不长，好像对我感到了很不满，虽然这原因不在我的身上但是我还是道个歉，希望疫情赶紧过去。<img src="/2020/02/08/dui-han-jia-qian-ban-duan-shi-jian-de-zong-jie/d.jpg" alt></p><p>组织一次完美的旅行，来弥补这三个月没见的遗憾。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Diary2</title>
      <link href="/2020/02/07/spring-diary2/"/>
      <url>/2020/02/07/spring-diary2/</url>
      
        <content type="html"><![CDATA[<h1 id="通过注解配置Bean"><a href="#通过注解配置Bean" class="headerlink" title="通过注解配置Bean"></a>通过注解配置Bean</h1><h2 id="1-在classpath中扫描组件"><a href="#1-在classpath中扫描组件" class="headerlink" title="1.在classpath中扫描组件"></a>1.在classpath中扫描组件</h2><p>1.Spring能从classpath下自动扫描，侦测和实例化具有特定注解的组件</p><p>2.特定的组件包括：</p><p>​        -@Component：基本注解，表示了一个受Spring管理的组件</p><p>​        -@Respository：标识持久层的组件</p><p>​        -@Service：标识服务层的组件</p><p>​        -@Controller：标识表现层的组件</p><p>3.命名规则：使用非限定类名，第一个字母小写。也可以在注解中通过value属性值表示组件名称</p><p>4.在组件类上使用特定注解之后需要在配置文件中声明<code>&lt;context:component-scan&gt;</code>这个命名空间。</p><p>5.用resource-pattern属性扫描指定的包</p><p>6.用content:exclude-filter子节点的expression可以排除表达式指定的不需要扫描的组件，用content:include-filter子节点的expression可以排除表达式指定的不需要扫描的组件，但是需要父节点的use-default-filters属性为false，可以修改type的值来改变包含或者不包含实现类的</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    指定SpringIOC容器扫描的包--></span>    <span class="token comment" spellcheck="true">&lt;!--    用resource-pattern属性扫描指定的包--></span>    <span class="token comment" spellcheck="true">&lt;!--    用content:exclude-filter子节点的expression可以排除表达式指定的不需要扫描的组件--></span>    <span class="token comment" spellcheck="true">&lt;!--    用content:include-filter子节点的expression可以排除表达式指定的不需要扫描的组件,但是需要父节点的use-default-filters属性为false--></span>    <span class="token comment" spellcheck="true">&lt;!--    可以修改type的值来改变包含或者不包含实现类的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.annotation<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>这是一份较为简单且完整的spring配置文件的配置，我把这次学习所建的类存放在com.spring.annotation下。</p><h2 id="2-通过注解建立Bean之间的关联关系"><a href="#2-通过注解建立Bean之间的关联关系" class="headerlink" title="2.通过注解建立Bean之间的关联关系"></a>2.通过注解建立Bean之间的关联关系</h2><p>1.当Bean之间存在关联关系的时候，在没有注解的情况下无法调用关联的Bean。</p><p>建立下列Bean关系作实例</p><pre class=" language-java"><code class="language-java">`UserService<span class="token punctuation">.</span>java`<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">`UserRepositoryImpl<span class="token punctuation">.</span>java`<span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"UserRepository"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserRepositoryImpl save"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">`UserController`<span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring 配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.annotation<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>2.在构造器、普通字段、一切具有参数的方法都可以使用@Autowired注解，这样spring在构造的时候就会自动构造这个注解所表示的代码。</p><p>3.Autowired装载的属性必须在spring里注解，否则会抛异常，如果想让它不存在可以将required设置为false。</p><h2 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h2><p>​        这一节的学习就到这，代码我会上传到我的<a href="https://github.com/dongdongdontforget" target="_blank" rel="noopener">github</a>上，学会了写博客学习就停不下来了。</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring diary1</title>
      <link href="/2020/02/07/spring-diary1/"/>
      <url>/2020/02/07/spring-diary1/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h1><p>由于个人因素spring刚开始的学习没有记录到博客上，只能从这节开始记录</p><h2 id="一-Spring介绍"><a href="#一-Spring介绍" class="headerlink" title="一.Spring介绍"></a>一.Spring介绍</h2><p>​        Spring4.0是 Spring 推出的一个重大版本升级，进一步加强了 Spring 作为 Java 领域第一开源平台的地位。Spring4.0 引入了众多 Java 开发者期盼的新特性，如泛型依赖注入、SpEL、校验及格式化框架、Rest风格的 WEB 编程模型等。这些新功能实用性强、易用性高，可大幅降低 JavaEE 开发的难度，同时有效提升应用开发的优雅性。</p><p>1.Spring是一个开源框架。</p><p>2.Spring为简化企业级应用开发而生。使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。</p><p>3.Spring是一个IOC（DI）和AOP容器框架</p><p><strong>特点：</strong></p><p>​        -轻量级</p><p>​        -依赖注入（DI）</p><p>​        -面向切面编程（AOP）</p><p>​        -容器</p><p>​        -框架</p><p>​        -一站式</p><p><img src="/2020/02/07/spring-diary1/arch1.png" alt="p1"></p><h2 id="二-Spring学习来源"><a href="#二-Spring学习来源" class="headerlink" title="二.Spring学习来源"></a>二.Spring学习来源</h2><p>​        博主的学习资料来自于一个叫做<strong>代码基基</strong>的UP主，视频链接<u><a href="https://www.bilibili.com/video/av59570922" target="_blank" rel="noopener">点击这里</a></u>。这里已经得到了UP主的授权，视频一共36节，辅助学习地方用到了w3cschool的教程，希望对大家有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My firsy blog</title>
      <link href="/2020/02/06/my-firsy-blog/"/>
      <url>/2020/02/06/my-firsy-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="经过不懈的努力-终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！"><a href="#经过不懈的努力-终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！" class="headerlink" title="经过不懈的努力 终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！"></a>经过不懈的努力 终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！</h1>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
