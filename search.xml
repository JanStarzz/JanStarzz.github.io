<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL Diary2</title>
      <link href="/2020/02/08/mysql-diary2/"/>
      <url>/2020/02/08/mysql-diary2/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Dairy2"><a href="#MySQL-Dairy2" class="headerlink" title="MySQL Dairy2"></a>MySQL Dairy2</h1><h2 id="一、基础查询"><a href="#一、基础查询" class="headerlink" title="一、基础查询"></a>一、基础查询</h2><p>&emsp;&emsp;语法：<code>SELECT 查询列表 FROM 表名</code></p><p>&emsp;&emsp;特点：①查询列表可以是表中字段、常量值、表达式、函数</p><p>  &emsp;&emsp;  ②查询的结果是一个虚拟的表格</p><h3 id="1-查询表中的字段"><a href="#1-查询表中的字段" class="headerlink" title="1.查询表中的字段"></a>1.查询表中的字段</h3><p>&emsp;&emsp;查询表中的字段可以是单个也可以是多个，多个中间用逗号隔开</p><p>&emsp;&emsp;例：查询employees表中的last_name项</p><p>&emsp;&emsp;<code>SELECT last_name FROM employees;</code></p><p>&emsp;&emsp;例：查询employees表中的first_name和last_name项</p><p>&emsp;&emsp;<code>SELECT last_name, first_name FROM employees;</code></p><p>&emsp;&emsp;例：查询employees表中的所有字段</p><p>&emsp;&emsp;<code>SELECT * FROM employees;</code></p><h3 id="2-查询常量值"><a href="#2-查询常量值" class="headerlink" title="2.查询常量值"></a>2.查询常量值</h3><p>&emsp;&emsp;可以是数字也可以是字符串</p><p>&emsp;&emsp;例：查询常量100</p><p>&emsp;&emsp;<code>SELECT 100;</code></p><p>&emsp;&emsp;例：查询常量abc</p><p>&emsp;&emsp;<code>SELECT &#39;abc&#39;;</code></p><h3 id="3-查询常量表达式"><a href="#3-查询常量表达式" class="headerlink" title="3.查询常量表达式"></a>3.查询常量表达式</h3><p>&emsp;&emsp;可以查询数学表达式</p><p>&emsp;&emsp;例：查询100*98</p><p>&emsp;&emsp;<code>SELECT 100*98;</code></p><h3 id="4-查询函数"><a href="#4-查询函数" class="headerlink" title="4.查询函数"></a>4.查询函数</h3><p>&emsp;&emsp;例：查询版本号</p><p>&emsp;&emsp;<code>SELECT VERSION();</code></p><h3 id="5-起别名"><a href="#5-起别名" class="headerlink" title="5.起别名"></a>5.起别名</h3><p>&emsp;&emsp;使用AS关键字能给查询的字段起别名</p><p>&emsp;&emsp;例：查询employees中的last_name并改名为姓名</p><p>&emsp;&emsp;<code>SELECT last_name AS 姓名 FROM employees;</code></p><p>&emsp;&emsp;例：查询100*98 改名为结果</p><p>&emsp;&emsp;<code>SELECT 100*98 AS 结果;</code></p><h4 id="6-去重"><a href="#6-去重" class="headerlink" title="6.去重"></a>6.去重</h4><p>&emsp;&emsp;使用DISTINCT 关键字去重</p><p>&emsp;&emsp;例：查询employees中涉及到的所有部门编号</p><p>&emsp;&emsp;<code>SELECT DISTINCT dapartment_id FROM employees;</code></p><h3 id="7-号的作用"><a href="#7-号的作用" class="headerlink" title="7. +号的作用"></a>7. +号的作用</h3><p>&emsp;&emsp;+号只有运算符的作用</p><p>&emsp;&emsp;1.两个操作数都为数值型，则做加法运算。</p><p>&emsp;&emsp;例：<code>SELECT 100+900;</code></p><p>&emsp;&emsp;2.其中一个为字符型，则试图将字符型型数值转化为数值型，如果转化成功则继续做加法运算,如果失败则会将字符型数值转化为0。</p><p>&emsp;&emsp;例：<code>SELECT &#39;123&#39;+90 -&gt;SELECT 213;</code></p><p>&emsp;&emsp;<code>SELECT &#39;abc&#39;+90 -&gt; SELECT 90;</code></p><p>&emsp;&emsp;3.如果两边任意一边null，则结果为null</p><p>&emsp;&emsp;4.字符串拼接用CONCAT()函数</p><p>&emsp;&emsp;例：从employees表中选择last_name和first_name ，并拼接</p><p>&emsp;&emsp;<code>SELECT CONCAT(last_name, first_name) AS 姓名 FROM employees;</code></p><h2 id="二、条件查询"><a href="#二、条件查询" class="headerlink" title="二、条件查询"></a>二、条件查询</h2><p>&emsp;&emsp;语法：<code>SELECT 查询列表 FROM 表名 WHERE 筛选条件;</code></p><h3 id="1-按条件表达式筛选"><a href="#1-按条件表达式筛选" class="headerlink" title="1.按条件表达式筛选"></a>1.按条件表达式筛选</h3><p>&emsp;&emsp;条件运算符：&gt;, &lt;, =, !=, &lt;&gt;, &gt;=, &lt;=</p><p>&emsp;&emsp;例：查询工资大于12000的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employees WHERE salary&gt;12000;</code></p><p>&emsp;&emsp;例： 查询编号不等于90的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employees WHRER department_id&lt;&gt;90;</code></p><h3 id="2-按逻辑表达式筛选"><a href="#2-按逻辑表达式筛选" class="headerlink" title="2.按逻辑表达式筛选"></a>2.按逻辑表达式筛选</h3><p>&emsp;&emsp;逻辑运算符：&amp;&amp;,||,!(and, or, not)</p><p>&emsp;&emsp;例：查询工资大于12000且小于20000的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employees WHERE salary&lt;20000 and salary&gt;12000;</code></p><p>&emsp;&emsp;例：查询员工工资大于20000或者小于5000的员工信息</p><p>&emsp;&emsp;<code>SELECT * FROM employess WHERE salary&lt;5000 or salary&gt;20000;</code></p><h3 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3.模糊查询"></a>3.模糊查询</h3><p>&emsp;&emsp;条件运算符：like，between and， in， is null||is not null</p><h4 id="emsp-emsp-3-1-like"><a href="#emsp-emsp-3-1-like" class="headerlink" title="&emsp;&emsp;3.1 like"></a>&emsp;&emsp;3.1 like</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询员工名中包含字符a的员工信息</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT * FROM employees WHERE last_name LIKE &#39;%a%;&#39;</code></p><p>&emsp;&emsp;&emsp;&emsp;通配符：</p><p>&emsp;&emsp;&emsp;&emsp;① % ：匹配0个或任意个字符</p><p>&emsp;&emsp;&emsp;&emsp;② _ : 匹配单个运算符</p><p>&emsp;&emsp;&emsp;&emsp;例：查询员工姓名第三个字符为a，第五个字符为e的员工名</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name FROM employees WHERE last_name LIKE &#39;__a_e%;&#39;</code></p><h4 id="emsp-emsp-3-2-between-and"><a href="#emsp-emsp-3-2-between-and" class="headerlink" title="&emsp;&emsp;3.2 between and"></a>&emsp;&emsp;3.2 between and</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询员工编号在100到120之间的员工信息</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT * FROM employees WHERE employees BETWEEN 100 AND 120;</code></p><p>&emsp;&emsp;&emsp;&emsp;① 前后条件不允许颠倒</p><p>&emsp;&emsp;&emsp;&emsp;② 包含两个临界值</p><h4 id="emsp-emsp-3-3-in"><a href="#emsp-emsp-3-3-in" class="headerlink" title="&emsp;&emsp;3.3 in"></a>&emsp;&emsp;3.3 in</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询员工公众编号IT_PROG、AD_VP的以一个员工名和工种编号</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name,job_id FROM employees WHERE IN(&#39;IT_PROG、AD_VP&#39;);</code></p><h4 id="emsp-emsp-3-4-is-null-is-not-null"><a href="#emsp-emsp-3-4-is-null-is-not-null" class="headerlink" title="&emsp;&emsp;3.4 is null/is not null"></a>&emsp;&emsp;3.4 is null/is not null</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询没有奖金的员工名和奖金率</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name, commission_pct FROM employees WHERE commission_pct IS NULL;</code></p><h4 id="emsp-emsp-3-5-安全等于-lt-gt"><a href="#emsp-emsp-3-5-安全等于-lt-gt" class="headerlink" title="&emsp;&emsp;3.5 安全等于&lt;=&gt;"></a>&emsp;&emsp;3.5 安全等于&lt;=&gt;</h4><p>&emsp;&emsp;&emsp;&emsp;例：查询没有奖金的员工名和奖金率</p><p>&emsp;&emsp;&emsp;&emsp;<code>SELECT last_name, commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL Diary1</title>
      <link href="/2020/02/08/mysql-diary1/"/>
      <url>/2020/02/08/mysql-diary1/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-Diary1"><a href="#MySQL-Diary1" class="headerlink" title="MySQL Diary1"></a>MySQL Diary1</h1><h2 id="1-学习数据库的原因"><a href="#1-学习数据库的原因" class="headerlink" title="1.学习数据库的原因"></a>1.学习数据库的原因</h2><p>保存在内存的数据易失，保存在文件中不方便查询。</p><p>保存在数据库中的<strong>原因</strong>:</p><p>1.实现数据的持久化。</p><p>2.使用完整的管理系统统一管理，易于查询。</p><h2 id="2-数据库的相关概念"><a href="#2-数据库的相关概念" class="headerlink" title="2.数据库的相关概念"></a>2.数据库的相关概念</h2><p><strong>DB:</strong>数据库（database），存储数据的“仓库”。它保存了一系列有组织的数据</p><p><strong>DBMS：</strong>数据库管理系统（Database Management System），数据库是铜鼓DBMS创建和操作的容器</p><p><strong>SQL：</strong>结构化查询语言（Structure Query Language），专门用来与数据库通信的语言。</p><h2 id="3-数据库的特点"><a href="#3-数据库的特点" class="headerlink" title="3.数据库的特点"></a>3.数据库的特点</h2><p><strong>1.</strong>将数据放到表中，表再放到库中</p><p><strong>2.</strong>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己，表名具有唯一性。</p><p><strong>3.</strong>表具有一些特性，这些特性定义了数据在表中如何存储，类似java中“类”的设计。</p><p><strong>4.</strong>表由列组成，我们也称为字段。所有的表都是由一个或多个列组成的，每一列都类似java中的“属性”。</p><p><strong>5.</strong>表中的数据是安航存储的，每一行类似于java中的“对象”。</p><h2 id="4-数据库安装时的一些问题"><a href="#4-数据库安装时的一些问题" class="headerlink" title="4.数据库安装时的一些问题"></a>4.数据库安装时的一些问题</h2><p><strong>安装前的了解</strong></p><p>DBMS分为两类：基于共享文件系统的DBMS（Access），基于客户机—服务器的DBMS（MySQL）</p><p><strong>官方下载的网址：</strong><a href="http://dev.mysql.com/downloads/mysql" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql</a>，版本比较多，博主喜欢尝鲜所以用的是最新的8.0版</p><p><strong>出现的问题：</strong>安装的时候出现问题可能是之前的数据库没有卸载干净，可以去把安装路径文件删除和C盘的隐藏文件program data里的MySQL删除，并清楚一下注册表。（注意：一定要记住密码！！！忘了很麻烦！！！）</p><p><strong>MySQL的服务启动：</strong>服务需要启动，否则无法进入。</p><p>1.启动方法打开任务管理器，点击服务，找到MySQL的那一项，后面的数字可能有所不同，但是并无大碍。<img src="/2020/02/08/mysql-diary1/MySQL服务启动.png" alt="MySQL服务启动" style="zoom:100%;"></p><p>2.命令行方式，用管理员方式打开命令行，输入<code>net start MySQL80</code>(后缀的数字看你自己的)，关闭同理用<code>net stop MySQL80</code>。</p><h2 id="5-MySQL服务端的登录和退出"><a href="#5-MySQL服务端的登录和退出" class="headerlink" title="5.MySQL服务端的登录和退出"></a>5.MySQL服务端的登录和退出</h2><h3 id="1-登录方法"><a href="#1-登录方法" class="headerlink" title="1.登录方法"></a>1.登录方法</h3><p>1.用MySQL的命令行，MySQL 8.0 command line进入。（只适用于ROOT用户）</p><p>2.用cmd进入。输入<code>mysql -u root -p</code>再输入密码即可进入。</p><p>3.用MySQL安装时自带的MySQL workbench进入。</p><p>4.用其他可视化工具，例如Jet Brain公司的DataGrip进入。</p><h3 id="2-注意事项"><a href="#2-注意事项" class="headerlink" title="2.注意事项"></a>2.注意事项</h3><p>1.登录前必须保证服务是启动的。</p><p>2.如果在安装MySQL的时候没有配置环境变量，用第二种方式登录的时候需要配置环境变量。具体的配置方法如下：</p><p>右键此电脑点击属性-&gt;点击右侧的高级系统设置-&gt;点击环境变量-&gt;找到系统变量下的path-&gt;点击编辑-&gt;将你MySQL安装路径下的bin的路径复制添加即可（我的是C:\Program Files\MySQL\MySQL Server 8.0\bin）。</p><p>重启cmd，然后输入<code>mysql -u root -p</code>再输入密码即可。</p><p>3.如果出现<code>[Mysql Lost connection to MySQL server at ‘reading initial communication packet&#39;, system error: 0]</code>错误，需要修改<code>C:\ProgramData\MySQL\MySQL Server 8.0</code>下的my.ini文件，找到[mysqld]区域添加<code>skip-name-resolve</code>即可。</p><h2 id="6-MySQL的常见命令"><a href="#6-MySQL的常见命令" class="headerlink" title="6.MySQL的常见命令"></a>6.MySQL的常见命令</h2><table><thead><tr><th>代码</th><th align="left">作用</th></tr></thead><tbody><tr><td>show databases;</td><td align="left">显示所有的数据库</td></tr><tr><td>use ***;</td><td align="left">进入某个数据库，***为数据库名称</td></tr><tr><td>show tables;</td><td align="left">显示这个数据库的所有表</td></tr><tr><td>show tables from ***;</td><td align="left">显示***这个数据库里的所有表</td></tr><tr><td>select database();</td><td align="left">显示你所在的数据库</td></tr><tr><td>select version();</td><td align="left">显示数据库版本</td></tr></tbody></table><h2 id="7-MySQL语法规范"><a href="#7-MySQL语法规范" class="headerlink" title="7.MySQL语法规范"></a>7.MySQL语法规范</h2><p>1.不区分大小写，建议关键字大写，表名、列名小写</p><p>2.每条命令用分号结尾。</p><p>3.根据需要，命令可以进行缩进或者换行。</p><p>4.注释。</p><p>  单行注释：#注释文字</p><p>  多行注释：/*注释文字*/</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对寒假前半段时间的总结</title>
      <link href="/2020/02/08/dui-han-jia-qian-ban-duan-shi-jian-de-zong-jie/"/>
      <url>/2020/02/08/dui-han-jia-qian-ban-duan-shi-jian-de-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>​        寒假的时间已经过去将近一半了，这个寒假前期因为一些家事奔波于老家和山东之间，也不知道这个<strong><em>新冠病毒</em></strong>会发展的如此迅速，导致这个寒假的所有计划都打乱了。好多人没见，好多事干不成，真的是太难过了。</p><p>​        学习方面的话首先把<strong>Spring</strong>的基础部分差不多整完了，虽然学习量不是很大，但是比以前寒假从来没有学习过要好很多了，希望在接下来的很长一段时间内能够学习到更多 的东西。发现现阶段学<strong>Spring</strong>还有些吃力，比如开发的架构还有一些基础不是很好，所以打算在此先告一段落了，从一些简单的开始学习，下午制定一下学习路线开始新的学习计划。</p><p>​        <strong>璐璐宝贝</strong>这个寒假好像只见了两次，时间还不长，好像对我感到了很不满，虽然这原因不在我的身上但是我还是道个歉，希望疫情赶紧过去。<img src="/2020/02/08/dui-han-jia-qian-ban-duan-shi-jian-de-zong-jie/d.jpg" alt></p><p>组织一次完美的旅行，来弥补这三个月没见的遗憾。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 寒假 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Diary2</title>
      <link href="/2020/02/07/spring-diary2/"/>
      <url>/2020/02/07/spring-diary2/</url>
      
        <content type="html"><![CDATA[<h1 id="通过注解配置Bean"><a href="#通过注解配置Bean" class="headerlink" title="通过注解配置Bean"></a>通过注解配置Bean</h1><h2 id="1-在classpath中扫描组件"><a href="#1-在classpath中扫描组件" class="headerlink" title="1.在classpath中扫描组件"></a>1.在classpath中扫描组件</h2><p>1.Spring能从classpath下自动扫描，侦测和实例化具有特定注解的组件</p><p>2.特定的组件包括：</p><p>​        -@Component：基本注解，表示了一个受Spring管理的组件</p><p>​        -@Respository：标识持久层的组件</p><p>​        -@Service：标识服务层的组件</p><p>​        -@Controller：标识表现层的组件</p><p>3.命名规则：使用非限定类名，第一个字母小写。也可以在注解中通过value属性值表示组件名称</p><p>4.在组件类上使用特定注解之后需要在配置文件中声明<code>&lt;context:component-scan&gt;</code>这个命名空间。</p><p>5.用resource-pattern属性扫描指定的包</p><p>6.用content:exclude-filter子节点的expression可以排除表达式指定的不需要扫描的组件，用content:include-filter子节点的expression可以排除表达式指定的不需要扫描的组件，但是需要父节点的use-default-filters属性为false，可以修改type的值来改变包含或者不包含实现类的</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--    指定SpringIOC容器扫描的包--></span>    <span class="token comment" spellcheck="true">&lt;!--    用resource-pattern属性扫描指定的包--></span>    <span class="token comment" spellcheck="true">&lt;!--    用content:exclude-filter子节点的expression可以排除表达式指定的不需要扫描的组件--></span>    <span class="token comment" spellcheck="true">&lt;!--    用content:include-filter子节点的expression可以排除表达式指定的不需要扫描的组件,但是需要父节点的use-default-filters属性为false--></span>    <span class="token comment" spellcheck="true">&lt;!--    可以修改type的值来改变包含或者不包含实现类的--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.annotation<span class="token punctuation">"</span></span> <span class="token attr-name">use-default-filters</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Repository"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>include-filter</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>annotation<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.stereotype.Repository<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>这是一份较为简单且完整的spring配置文件的配置，我把这次学习所建的类存放在com.spring.annotation下。</p><h2 id="2-通过注解建立Bean之间的关联关系"><a href="#2-通过注解建立Bean之间的关联关系" class="headerlink" title="2.通过注解建立Bean之间的关联关系"></a>2.通过注解建立Bean之间的关联关系</h2><p>1.当Bean之间存在关联关系的时候，在没有注解的情况下无法调用关联的Bean。</p><p>建立下列Bean关系作实例</p><pre class=" language-java"><code class="language-java">`UserService<span class="token punctuation">.</span>java`<span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserRepository userRepository<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserService add..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">`UserRepositoryImpl<span class="token punctuation">.</span>java`<span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"UserRepository"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRepositoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserRepositoryImpl save"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java">`UserController`<span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"UserController execute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring 配置文件</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>         http://www.springframework.org/schema/beans         http://www.springframework.org/schema/beans/spring-beans.xsd         http://www.springframework.org/schema/context         http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.spring.annotation<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>2.在构造器、普通字段、一切具有参数的方法都可以使用@Autowired注解，这样spring在构造的时候就会自动构造这个注解所表示的代码。</p><p>3.Autowired装载的属性必须在spring里注解，否则会抛异常，如果想让它不存在可以将required设置为false。</p><h2 id="3-结语"><a href="#3-结语" class="headerlink" title="3.结语"></a>3.结语</h2><p>​        这一节的学习就到这，代码我会上传到我的<a href="https://github.com/dongdongdontforget" target="_blank" rel="noopener">github</a>上，学会了写博客学习就停不下来了。</p><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring diary1</title>
      <link href="/2020/02/07/spring-diary1/"/>
      <url>/2020/02/07/spring-diary1/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Spring学习"><a href="#Spring学习" class="headerlink" title="Spring学习"></a>Spring学习</h1><p>由于个人因素spring刚开始的学习没有记录到博客上，只能从这节开始记录</p><h2 id="一-Spring介绍"><a href="#一-Spring介绍" class="headerlink" title="一.Spring介绍"></a>一.Spring介绍</h2><p>​        Spring4.0是 Spring 推出的一个重大版本升级，进一步加强了 Spring 作为 Java 领域第一开源平台的地位。Spring4.0 引入了众多 Java 开发者期盼的新特性，如泛型依赖注入、SpEL、校验及格式化框架、Rest风格的 WEB 编程模型等。这些新功能实用性强、易用性高，可大幅降低 JavaEE 开发的难度，同时有效提升应用开发的优雅性。</p><p>1.Spring是一个开源框架。</p><p>2.Spring为简化企业级应用开发而生。使用Spring可以使简单的JavaBean实现以前只有EJB才能实现的功能。</p><p>3.Spring是一个IOC（DI）和AOP容器框架</p><p><strong>特点：</strong></p><p>​        -轻量级</p><p>​        -依赖注入（DI）</p><p>​        -面向切面编程（AOP）</p><p>​        -容器</p><p>​        -框架</p><p>​        -一站式</p><p><img src="/2020/02/07/spring-diary1/arch1.png" alt="p1"></p><h2 id="二-Spring学习来源"><a href="#二-Spring学习来源" class="headerlink" title="二.Spring学习来源"></a>二.Spring学习来源</h2><p>​        博主的学习资料来自于一个叫做<strong>代码基基</strong>的UP主，视频链接<u><a href="https://www.bilibili.com/video/av59570922" target="_blank" rel="noopener">点击这里</a></u>。这里已经得到了UP主的授权，视频一共36节，辅助学习地方用到了w3cschool的教程，希望对大家有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
            <tag> 学习 </tag>
            
            <tag> 寒假 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>My firsy blog</title>
      <link href="/2020/02/06/my-firsy-blog/"/>
      <url>/2020/02/06/my-firsy-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="经过不懈的努力-终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！"><a href="#经过不懈的努力-终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！" class="headerlink" title="经过不懈的努力 终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！"></a>经过不懈的努力 终于把网站搭建成功并发表了第一篇blog，从今天开始我和璐璐每天的学习都会在这里记录下来，加油！2020！</h1>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
